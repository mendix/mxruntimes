import"./39c2a2fb.js";import{e as ensure,m as mapValues,A as AssertionError}from"./546dec4f.js";import{a as asProperty}from"./d63ed225.js";import"./2bc24ff8.js";import{p as pageScope}from"./e1d6c916.js";import"./2209f9e8.js";import"./0c69f47a.js";import"./fdd4c4ff.js";import{N as NanoflowEngine,e as executors}from"./672069fa.js";import{M as MxObject}from"./37fca272.js";import"./38d79760.js";import"./92c47dca.js";import{d as asDynamicValue,u as unavailable,m as mapL,l as loading,g as getOrElseL}from"./6dbf3b84.js";import{a as loadableDependentResource}from"./b4041520.js";import{M as MxObject1}from"./2a2a8df8.js";import{a as toNanoflowParameters,g as getActionParameters}from"./9898fb3f.js";import{w as withObjectStoring}from"./ba952791.js";import{t as toObjectItem}from"./7975ceb4.js";const nanoflowEngine=new NanoflowEngine(executors),NanoflowObjectProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.warn("Unable to execute nanoflow because you do not have sufficient permissions."),()=>asDynamicValue(unavailable());const nanoflowResult=loadableDependentResource(`Execute data source nanoflow of ${config.friendlyId}`,()=>getActionParameters(config.argMap,store),async parameters=>{if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get(pageScope,"form"))[0],result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowParameters(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm);if(result instanceof MxObject)return MxObject1.from(result);if(void 0===result)return unavailable();throw new AssertionError}),mxObject1=withObjectStoring(()=>nanoflowResult.get(),store,widgetId);return()=>asDynamicValue(mapL(mxObject1.get(),obj=>toObjectItem(obj.old(),widgetId)))});export{NanoflowObjectProperty};
