import"./f0d16cff.js";import{A as AssertionError}from"./ad1d08ab.js";import{B as loadableDependentResource,y as asDynamicValue,l as loading,e as ensure,m as mapValues,g as getOrElseL,d as mapL}from"./79cc6120.js";import{a as asProperty}from"./72a4665b.js";import"big.js";import{p as pageScope}from"./50adac5e.js";import{M as MxObject}from"./6ae611dc.js";import"./b98156b5.js";import"./e50ef415.js";import{n as nanoflowEngine,b as toNanoflowArguments,c as getActionParameters$}from"./730a2bac.js";import{a as dynUnavailable}from"./0e7164f2.js";import{M as MxObject1}from"./b4a5c3fe.js";import"./379ba2c6.js";import{w as withObjectStoring}from"./64aaf931.js";import{t as toObjectItem}from"./2d0c3e4e.js";const NanoflowObjectProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.warn("Unable to execute nanoflow because you do not have sufficient permissions."),()=>dynUnavailable();const nanoflowResult=loadableDependentResource(`Execute data source nanoflow of ${config.friendlyId}`,()=>getActionParameters$(config.argMap,store),async parameters=>{if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get$(pageScope,"form"))[0];try{const result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowArguments(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm);if(result instanceof MxObject)return MxObject1.from$(result);if(void 0===result)return dynUnavailable()}catch(e){return function(config,e){mx.onError(new Error(`An error occurred while executing object data source nanoflow for widget ${config.friendlyId}: ${e.message}`))}(config,e),dynUnavailable()}throw new AssertionError}),mxObject1=withObjectStoring(()=>nanoflowResult.get(),store,widgetId),result=asDynamicValue(()=>mapL(mxObject1.get(),obj=>toObjectItem(obj.old(),widgetId)));return()=>result.get()});export{NanoflowObjectProperty};
