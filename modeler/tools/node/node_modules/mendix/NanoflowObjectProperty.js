import"./5dda5eb7.js";import{d as ensure,m as mapValues,b as AssertionError}from"./ddd19e5a.js";import{c as asProperty}from"./71d615f7.js";import"./3019ed1f.js";import"./967e2ac0.js";import"./d9069e30.js";import"./d5eebceb.js";import"./eed44530.js";import"./aa3ddc5d.js";import{b as pageScope}from"./2a30f3af.js";import{c as NanoflowEngine,d as executors}from"./8175df0e.js";import{a as MxObject}from"./3c905f8d.js";import"./b26e8ded.js";import"./a81bf7bc.js";import{i as asDynamicValue,b as unavailable,a as loading,g as getOrElseL,e as mapL}from"./cf055752.js";import{e as loadableDependentResource}from"./86e285ad.js";import{b as MxObject1}from"./22b17a9f.js";import{c as getActionParameters,b as toNanoflowParameters}from"./a057627c.js";import{a as withObjectStoring}from"./06257d0e.js";import{a as toObjectItem}from"./4068f775.js";const nanoflowEngine=new NanoflowEngine(executors),NanoflowObjectProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.warn("Unable to execute nanoflow because you do not have sufficient permissions."),()=>asDynamicValue(unavailable());const nanoflowResult=loadableDependentResource(`Execute data source nanoflow of ${config.friendlyId}`,()=>getActionParameters(config.argMap,store),async parameters=>{if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get(pageScope,"form"))[0],result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowParameters(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm);if(result instanceof MxObject)return MxObject1.from(result);if(void 0===result)return unavailable();throw new AssertionError}),mxObject1=withObjectStoring(()=>nanoflowResult.get(),store,widgetId);return()=>asDynamicValue(mapL(mxObject1.get(),obj=>toObjectItem(obj.old(),widgetId)))});export{NanoflowObjectProperty};
