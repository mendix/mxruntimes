import"./d4030583.js";import{A as AssertionError}from"./43297fe2.js";import{e as ensure,m as mapValues}from"./c49f953c.js";import{a as dynUnavailable}from"./0e7164f2.js";import"./b98156b5.js";import"./ee5a929f.js";import{j as loadableDependentResource,h as asDynamicValue,l as loading,g as getOrElseL,m as mapL}from"./189c82c6.js";import"big.js";import{p as pageScope}from"./8676e47e.js";import{a as asProperty}from"./72a4665b.js";import{t as toObjectItem}from"./925daa43.js";import{M as MxObject}from"./d6b7d05a.js";import"./da601b36.js";import{n as nanoflowEngine}from"./df897ee2.js";import{M as MxObject1}from"./2745d635.js";import{d as toNanoflowArguments,e as getActionParameters$}from"./49a60b8f.js";import"./7ca6d1ae.js";import{w as withObjectStoring}from"./3faf6e70.js";const NanoflowObjectProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.warn("Unable to execute nanoflow because you do not have sufficient permissions."),()=>dynUnavailable();const nanoflowResult=loadableDependentResource(`Execute data source nanoflow of ${config.friendlyId}`,()=>getActionParameters$(config.argMap,store),async parameters=>{if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get$(pageScope,"form"))[0];try{const result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowArguments(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm);if(result instanceof MxObject)return MxObject1.from$(result);if(void 0===result)return dynUnavailable()}catch(e){return function(config,e){mx.onError(new Error(`An error occurred while executing object data source nanoflow for widget ${config.friendlyId}: ${e.message}`))}(config,e),dynUnavailable()}throw new AssertionError}),mxObject1=withObjectStoring(()=>nanoflowResult.get(),store,widgetId),result=asDynamicValue(()=>mapL(mxObject1.get(),obj=>toObjectItem(obj.old())));return()=>result.get()});export{NanoflowObjectProperty};
