import"./4887fae1.js";import{A as AssertionError}from"./b0fce5df.js";import{B as loadableDependentResource,y as asDynamicValue,l as loading,e as ensure,m as mapValues,g as getOrElseL,d as mapL}from"./764abf4b.js";import{a as asProperty}from"./72a4665b.js";import"big.js";import{p as pageScope}from"./8dc90874.js";import{M as MxObject}from"./8f1f3520.js";import"./b98156b5.js";import"./28ba9e42.js";import{n as nanoflowEngine,b as toNanoflowArguments,c as getActionParameters$}from"./eadfa9a2.js";import{a as dynUnavailable}from"./0e7164f2.js";import{M as MxObject1}from"./40ac1c81.js";import"./0c03647e.js";import{w as withObjectStoring}from"./7a7a0ec3.js";import{t as toObjectItem}from"./2d0c3e4e.js";const NanoflowObjectProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.warn("Unable to execute nanoflow because you do not have sufficient permissions."),()=>dynUnavailable();const nanoflowResult=loadableDependentResource(`Execute data source nanoflow of ${config.friendlyId}`,()=>getActionParameters$(config.argMap,store),async parameters=>{if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get$(pageScope,"form"))[0],result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowArguments(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm);if(result instanceof MxObject)return MxObject1.from$(result);if(void 0===result)return dynUnavailable();throw new AssertionError}),mxObject1=withObjectStoring(()=>nanoflowResult.get(),store,widgetId),result=asDynamicValue(()=>mapL(mxObject1.get(),obj=>toObjectItem(obj.old(),widgetId)));return()=>result.get()});export{NanoflowObjectProperty};
