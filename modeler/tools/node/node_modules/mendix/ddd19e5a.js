class AssertionError extends Error{constructor(message="Unexpected error occurred, please contact your system administrator."){super(message),Object.setPrototypeOf(this,AssertionError.prototype)}}function ensure(arg){if(null==arg)throw new Error("Did not expect an argument to be undefined");return arg}function crash(){throw new AssertionError}function friendlyName(Component){return Component.displayName||Component.name||"<component>"}function isString(value){return"string"==typeof value}function isJson(obj){return null!=obj&&"object"==typeof obj&&obj.constructor==={}.constructor}function isArrayOf(type,value){return value instanceof Array&&value.every(v=>void 0===v||v instanceof type)}function isStringArray(value){return value instanceof Array&&value.every(v=>void 0===v||"string"==typeof v)}function splitAttributePath(attributePath){const parts=attributePath.split("/");return parts.length>1&&parts.shift(),{attribute:parts.pop(),entityPath:parts.length?parts.join("/"):void 0}}function unique(list){const res=[];return list.forEach(item=>{-1===res.indexOf(item)&&res.push(item)}),res}function tuple(...args){return args}function mapValues(source,mapValue){const result={};return Object.keys(source).forEach(key=>result[key]=mapValue(source[key])),result}function uniqueBy(list,keySelector){const res=[],keys={};return list.forEach(item=>{const key=keySelector(item);Object.prototype.hasOwnProperty.call(keys,key)||(keys[key]=!0,res.push(item))}),res}function concat(arrays){return[].concat(...arrays)}function escapeXml(s){return s.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}export{friendlyName as a,AssertionError as b,isJson as c,ensure as d,unique as e,concat as f,uniqueBy as g,crash as h,escapeXml as i,isStringArray as j,isString as k,isArrayOf as l,mapValues as m,splitAttributePath as n,tuple as o};
