import{b as runInAction,d as createAtom,o as observable,e as comparer}from"./ef69c932.js";import{A as AssertionError}from"./53bf75a6.js";import{c as concat}from"./567083d6.js";import{B as Big}from"./2bc24ff8.js";const persistableSlots=["amount","offset","selection"],pageScope="$pageParameter",stateUnavailable="unavailable";class Store{constructor(parentStore){this.parentStore=parentStore,this.stateMap={},this.slotMonitors={},this.childStores=[],this.parentStore&&this.parentStore.childStores.push(this)}destroy(){this.parentStore&&this.parentStore.childStores.splice(this.parentStore.childStores.indexOf(this),1)}set(widgetId,slot,value){const state=this.getState(widgetId,slot,!1),monitors=this.getAllMonitors(slot);runInAction(()=>{monitors.forEach(m=>m.reportChanged()),state.set(value)})}get$(widgetId,slot){return this.getState(widgetId,slot,!0).get()}getAll$(slot){return slot in this.slotMonitors||(this.slotMonitors[slot]=createAtom(`Monitor for slot ${slot}`)),this.slotMonitors[slot].reportObserved(),this.getAllStates(slot).map(s=>s.get()).filter(v=>void 0!==v)}dehydrate(){return Object.keys(this.stateMap).map(keyString=>JSON.parse(keyString)).filter(({slot:slot})=>persistableSlots.includes(slot)).map(({widgetId:widgetId,slot:slot})=>{const value=this.get$(widgetId,slot);return{widgetId:widgetId,slot:slot,value:value instanceof Big?value.toString():value}})}hydrate(states){states.forEach(({widgetId:widgetId,slot:slot,value:value})=>{switch(slot){case"amount":case"offset":this.set(widgetId,slot,Big(value));break;case"selection":this.set(widgetId,slot,value);break;default:throw new AssertionError(`Invalid slot for restoring the state: ${slot}`)}})}getAllMonitors(slot){return concat([slot in this.slotMonitors?[this.slotMonitors[slot]]:[],this.parentStore?this.parentStore.getAllMonitors(slot):[]])}getAllStates(slot){return Object.keys(this.stateMap).filter(keyString=>JSON.parse(keyString).slot===slot).map(keyString=>this.stateMap[keyString]).concat(...this.childStores.map(store=>store.getAllStates(slot)))}getState(widgetId,slot,inherited){const keyString=JSON.stringify({widgetId:widgetId,slot:slot});if(keyString in this.stateMap)return this.stateMap[keyString];if(inherited&&this.parentStore){const inheritedState=this.parentStore.findState(keyString);if(inheritedState)return inheritedState}return this.stateMap[keyString]=observable.box(void 0,{deep:!1,equals:comparer.structural}),this.stateMap[keyString]}findState(keyString){return keyString in this.stateMap?this.stateMap[keyString]:this.parentStore?this.parentStore.findState(keyString):void 0}}export{Store as S,pageScope as p,stateUnavailable as s};
