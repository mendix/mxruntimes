import"./d5eebceb.js";import"./6727fec8.js";import"./eed44530.js";import"./aa3ddc5d.js";import{d as ensure,m as mapValues,i as crash}from"./ff203afa.js";import"./02d97a6c.js";import{c as asProperty}from"./71d615f7.js";import"./3019ed1f.js";import"./967e2ac0.js";import"./d9069e30.js";import{b as pageScope}from"./b3fab43d.js";import{c as NanoflowEngine,d as executors}from"./7d776635.js";import"./4b8e45df.js";import{i as asDynamicValue,b as unavailable,a as loading,g as getOrElseL,d as available}from"./7a470c91.js";import"./12049987.js";import"./8a992959.js";import{c as getActionParameters,b as toNanoflowParameters}from"./41f30614.js";import"./4068f775.js";import{a as getClientPagedList}from"./6fa8a362.js";const nanoflowEngine=new NanoflowEngine(executors),NanoflowObjectListProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.debug("Unable to execute nanoflow because you do not have sufficient permissions."),()=>asDynamicValue(unavailable());const result=getClientPagedList(config,store,widgetId,()=>getActionParameters(config.argMap,store),async function(parameters){if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get(pageScope,"form"))[0],result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowParameters(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm),normalizedResult=void 0===result?[]:Array.isArray(result)?result:crash();return available(normalizedResult)});return()=>result.get()});export{NanoflowObjectListProperty};
