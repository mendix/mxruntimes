import"./39c2a2fb.js";import{e as ensure,m as mapValues,b as crash}from"./546dec4f.js";import{a as asProperty}from"./d63ed225.js";import"./2bc24ff8.js";import{p as pageScope}from"./e1d6c916.js";import"./2209f9e8.js";import"./0c69f47a.js";import"./fdd4c4ff.js";import{N as NanoflowEngine,e as executors}from"./672069fa.js";import"./37fca272.js";import"./38d79760.js";import"./92c47dca.js";import{d as asDynamicValue,u as unavailable,l as loading,g as getOrElseL,a as available}from"./6dbf3b84.js";import"./b4041520.js";import"./2a2a8df8.js";import{g as getActionParameters,a as toNanoflowParameters}from"./9898fb3f.js";import"./7975ceb4.js";import{g as getClientPagedList}from"./893d9d76.js";const nanoflowEngine=new NanoflowEngine(executors),NanoflowObjectListProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.debug("Unable to execute nanoflow because you do not have sufficient permissions."),()=>asDynamicValue(unavailable());const result=getClientPagedList(config,store,widgetId,()=>getActionParameters(config.argMap,store),async function(parameters){if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get(pageScope,"form"))[0],result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowParameters(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm),normalizedResult=void 0===result?[]:Array.isArray(result)?result:crash();return available(normalizedResult)});return()=>result.get()});export{NanoflowObjectListProperty};
