import"./d4030583.js";import"./43297fe2.js";import{e as ensure,m as mapValues,d as crash}from"./c49f953c.js";import{a as dynUnavailable}from"./0e7164f2.js";import"./b98156b5.js";import"./ee5a929f.js";import{l as loading,g as getOrElseL,a as available,u as unavailable}from"./189c82c6.js";import"big.js";import{p as pageScope}from"./8676e47e.js";import{a as asProperty}from"./72a4665b.js";import"./925daa43.js";import"./d6b7d05a.js";import"./da601b36.js";import{n as nanoflowEngine}from"./df897ee2.js";import"./2745d635.js";import{e as getActionParameters$,d as toNanoflowArguments}from"./49a60b8f.js";import"./7ca6d1ae.js";import{g as getClientPagedList}from"./34a2844a.js";const NanoflowObjectListProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.debug("Unable to execute nanoflow because you do not have sufficient permissions."),()=>dynUnavailable();const result=getClientPagedList(config,store,widgetId,()=>getActionParameters$(config.argMap,store),(async function(parameters){if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get$(pageScope,"form"))[0];try{const result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowArguments(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm),normalizedResult=void 0===result?[]:Array.isArray(result)?result:crash();return available(normalizedResult)}catch(e){return function(config,e){mx.onError(new Error(`An error occurred while executing object list data source nanoflow for widget ${config.friendlyId}: ${e.message}`))}(config,e),unavailable()}}));return()=>result.get()});export{NanoflowObjectListProperty};
