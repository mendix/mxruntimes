import"./ef69c932.js";import{e as ensure,m as mapValues,d as crash}from"./0e413733.js";import{a as asProperty}from"./e3b801f3.js";import{p as pageScope}from"./5838721f.js";import{c as getActionParameters$,n as nanoflowEngine,b as toNanoflowArguments}from"./5f481ef5.js";import"./fdd4c4ff.js";import"./d25c5dcf.js";import"./9df15dda.js";import{a as dynUnavailable}from"./573c00fc.js";import{h as asDynamicValue,l as loading,g as getOrElseL,a as available}from"./b3d27a00.js";import"./0b8ac900.js";import"./b9638e50.js";import"./7975ceb4.js";import{g as getClientPagedList}from"./22110f7c.js";const NanoflowObjectListProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.debug("Unable to execute nanoflow because you do not have sufficient permissions."),()=>dynUnavailable();const list=getClientPagedList(config,store,widgetId,()=>getActionParameters$(config.argMap,store),async function(parameters){if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get$(pageScope,"form"))[0],result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowArguments(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm),normalizedResult=void 0===result?[]:Array.isArray(result)?result:crash();return available(normalizedResult)}),result=asDynamicValue(()=>list.get());return()=>result.get()});export{NanoflowObjectListProperty};
