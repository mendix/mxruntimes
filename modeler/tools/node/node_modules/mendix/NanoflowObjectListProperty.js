import"./4887fae1.js";import"./b0fce5df.js";import{y as asDynamicValue,l as loading,e as ensure,m as mapValues,g as getOrElseL,h as crash,a as available}from"./764abf4b.js";import{a as asProperty}from"./72a4665b.js";import"big.js";import{p as pageScope}from"./8dc90874.js";import"./8f1f3520.js";import"./b98156b5.js";import"./28ba9e42.js";import{c as getActionParameters$,n as nanoflowEngine,b as toNanoflowArguments}from"./eadfa9a2.js";import{a as dynUnavailable}from"./0e7164f2.js";import"./40ac1c81.js";import"./0c03647e.js";import"./2d0c3e4e.js";import{g as getClientPagedList}from"./65bb03b0.js";const NanoflowObjectListProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.debug("Unable to execute nanoflow because you do not have sufficient permissions."),()=>dynUnavailable();const list=getClientPagedList(config,store,widgetId,()=>getActionParameters$(config.argMap,store),(async function(parameters){if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get$(pageScope,"form"))[0],result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowArguments(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm),normalizedResult=void 0===result?[]:Array.isArray(result)?result:crash();return available(normalizedResult)})),result=asDynamicValue(()=>list.get());return()=>result.get()});export{NanoflowObjectListProperty};
