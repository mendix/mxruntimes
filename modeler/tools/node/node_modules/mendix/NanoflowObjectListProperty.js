import"./f0d16cff.js";import"./ad1d08ab.js";import{y as asDynamicValue,l as loading,e as ensure,m as mapValues,g as getOrElseL,h as crash,a as available,k as unavailable}from"./79cc6120.js";import{a as asProperty}from"./72a4665b.js";import"big.js";import{p as pageScope}from"./50adac5e.js";import"./6ae611dc.js";import"./b98156b5.js";import"./e50ef415.js";import{c as getActionParameters$,n as nanoflowEngine,b as toNanoflowArguments}from"./730a2bac.js";import{a as dynUnavailable}from"./0e7164f2.js";import"./b4a5c3fe.js";import"./379ba2c6.js";import"./2d0c3e4e.js";import{g as getClientPagedList}from"./0d49412d.js";const NanoflowObjectListProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.logger.debug("Unable to execute nanoflow because you do not have sufficient permissions."),()=>dynUnavailable();const list=getClientPagedList(config,store,widgetId,()=>getActionParameters$(config.argMap,store),(async function(parameters){if(Object.values(parameters).some(p=>"loading"===p.status))return loading();const currentForm=ensure(store.get$(pageScope,"form"))[0];try{const result=await nanoflowEngine.execute(config.source.nanoflow,toNanoflowArguments(mapValues(parameters,p=>getOrElseL(p,void 0))),currentForm),normalizedResult=void 0===result?[]:Array.isArray(result)?result:crash();return available(normalizedResult)}catch(e){return function(config,e){mx.onError(new Error(`An error occurred while executing object list data source nanoflow for widget ${config.friendlyId}: ${e.message}`))}(config,e),unavailable()}})),result=asDynamicValue(()=>list.get());return()=>result.get()});export{NanoflowObjectListProperty};
