import{View,Text,TextInput,Platform}from"react-native";import{Component,createElement,Fragment}from"react";import{F as FormatterType}from"./09e8fbb9.js";import{p as pluckFromList,e as exclude,o as only}from"./c701e63b.js";import"./5b829f15.js";import{A as Alert}from"./14a5240d.js";const platformKeyboardType={default:{android:"default",iOS:"default"},"number-pad":{android:"numeric",iOS:"number-pad"},"decimal-pad":{android:"numeric",iOS:"decimal-pad"},"phone-pad":{android:"phone-pad",iOS:"phone-pad"},url:{android:"default",iOS:"url"},"email-address":{android:"email-address",iOS:"email-address"}};class TextBox extends Component{constructor(props){super(props),this.state={displayValue:props.inputValue.displayValue},this.onChangeText=this.onChangeText.bind(this),this.onFocus=this.onFocus.bind(this),this.onBlur=this.onBlur.bind(this)}componentDidUpdate(prevProps){prevProps.inputValue.displayValue!==this.props.inputValue.displayValue&&this.setState({displayValue:this.props.inputValue.displayValue})}render(){const{inputStyles:inputStyles,inputDisabledStyles:inputDisabledStyles,inputErrorStyles:inputErrorStyles,labelStyles:labelStyles,labelStyleProps:labelStyleProps,validationMessageStyles:validationMessageStyles,inputTextInputStyleProps:inputTextInputStyleProps,inputDisabledTextInputStyleProps:inputDisabledTextInputStyleProps,inputErrorTextInputStyleProps:inputErrorTextInputStyleProps,containerStyle:containerStyle,inputContainerStyle:inputContainerStyle}=this.processStyles(),validation=this.props.inputValue.validation,editable=!this.props.inputValue.readOnly,style=editable?validation?[...inputStyles,...inputErrorStyles]:inputStyles:[...inputStyles,...inputDisabledStyles],styleProps=editable?validation?inputErrorTextInputStyleProps:inputTextInputStyleProps:inputDisabledTextInputStyleProps,props=Object.assign({maxLength:this.props.maxLength,testID:this.props.name,style:style,editable:editable,onChangeText:this.onChangeText,onFocus:this.onFocus,onBlur:this.onBlur,placeholder:this.props.placeholder.value||void 0,value:this.state.displayValue,keyboardType:TextBox.getPlatformKeyboardType(this.props.keyboardType),clearButtonMode:"while-editing",secureTextEntry:this.props.isPassword},styleProps);return createElement(Fragment,null,createElement(View,{key:"container",style:containerStyle},this.props.label&&createElement(Text,Object.assign({testID:`${this.props.name}$label`,key:"label",style:labelStyles},labelStyleProps),this.props.label.value),createElement(View,{style:inputContainerStyle},createElement(TextInput,Object.assign({key:"input"},props)),createElement(Alert,{key:"alert",testID:`${this.props.name}$alert`,style:validationMessageStyles,error:validation}))))}onChangeText(text){this.setState({displayValue:text})}onFocus(){const formatter=this.props.inputValue.formatter;formatter.type===FormatterType.Number&&this.props.inputValue.setFormatter(formatter.withConfig(Object.assign(Object.assign({},formatter.config),{groupDigits:!1}))),this.dispatchAction("onEnter")}onBlur(e){this.isNumberTextBox()&&this.props.inputValue.setFormatter(void 0),this.submitValue(),"tapOutside"!==e.type&&this.dispatchAction("onLeave")}submitValue(){this.state.displayValue!==this.props.inputValue.displayValue&&(this.props.inputValue.setTextValue(this.state.displayValue),this.state.displayValue!==this.props.inputValue.displayValue&&this.setState({displayValue:this.props.inputValue.displayValue}))}dispatchAction(property){const prop=this.props[property];"available"===this.props.inputValue.status&&prop&&prop.execute()}isNumberTextBox(){return this.props.inputValue.formatter.type===FormatterType.Number}processStyles(){const textInputStylePropsKeys=["autoCapitalize","placeholderTextColor","selectionColor","underlineColorAndroid"],labelStylePropsKeys=["numberOfLines"],isHorizontal="horizontal"===this.props.formOrientation,inputStyles=pluckFromList(this.props.style,"input").map(inputStyle=>{const textBoxStyleProps=exclude(inputStyle,textInputStylePropsKeys);return exclude(textBoxStyleProps,labelStylePropsKeys)}),inputDisabledStyles=pluckFromList(this.props.style,"inputDisabled").map(inputDisabledStyle=>{const textBoxStyleProps=exclude(inputDisabledStyle,textInputStylePropsKeys);return exclude(textBoxStyleProps,labelStylePropsKeys)}),inputErrorStyles=pluckFromList(this.props.style,"inputError").map(inputErrorStyle=>{const textBoxStyleProps=exclude(inputErrorStyle,textInputStylePropsKeys);return exclude(textBoxStyleProps,labelStylePropsKeys)}),inputTextInputStyleProps=pluckFromList(this.props.style,"input").map(inputStyle=>only(inputStyle,textInputStylePropsKeys)).reduce((result,style)=>Object.assign(Object.assign({},result),style),{}),inputDisabledTextInputStyleProps=pluckFromList(this.props.style,"inputDisabled").map(inputDisabledStyle=>only(inputDisabledStyle,textInputStylePropsKeys)).reduce((result,style)=>Object.assign(Object.assign({},result),style),{}),inputErrorTextInputStyleProps=pluckFromList(this.props.style,"inputError").map(inputErrorStyle=>only(inputErrorStyle,textInputStylePropsKeys)).reduce((result,style)=>Object.assign(Object.assign({},result),style),{}),validationMessageStyles=pluckFromList(this.props.style,"validationMessage"),containerStyle=[...pluckFromList(this.props.style,"container"),isHorizontal?{flexDirection:"row",alignItems:"center"}:void 0],labelStyleDirection=isHorizontal?{flex:this.props.labelWidth}:void 0,inputContainerStyle=Object.assign({flexDirection:"column"},isHorizontal?{flex:12-this.props.labelWidth}:void 0);return{inputStyles:inputStyles,inputDisabledStyles:inputDisabledStyles,inputErrorStyles:inputErrorStyles,labelStyles:[...pluckFromList(this.props.style,"label").map(labelStyle=>{const textBoxStyleProps=exclude(labelStyle,textInputStylePropsKeys);return exclude(textBoxStyleProps,labelStylePropsKeys)}),labelStyleDirection],labelStyleProps:pluckFromList(this.props.style,"label").map(labelStyle=>only(labelStyle,labelStylePropsKeys)).reduce((result,style)=>Object.assign(Object.assign({},result),style),{}),validationMessageStyles:validationMessageStyles,inputTextInputStyleProps:inputTextInputStyleProps,inputDisabledTextInputStyleProps:inputDisabledTextInputStyleProps,inputErrorTextInputStyleProps:inputErrorTextInputStyleProps,containerStyle:containerStyle,inputContainerStyle:inputContainerStyle}}static getPlatformKeyboardType(keyboardType){const platformKeyboard=platformKeyboardType[keyboardType];return"android"===Platform.OS?platformKeyboard.android:platformKeyboard.iOS}}export{TextBox};
