import{Picker as Picker$1,StyleSheet,Modal,TouchableWithoutFeedback,View,Button,TouchableOpacity,Text,PickerIOS,Platform}from"react-native";import{Component,createElement}from"react";import{t as translate}from"./da601b36.js";import{_ as __rest}from"./5b829f15.js";import{f as flatten,e as extract}from"./84c5d961.js";import{I as InputContainer}from"./8e73ab64.js";class DropDownAndroid extends Component{render(){const{name:name,inline:inline,style:style,items:items,disabled:disabled,selectedValue:selectedValue}=this.props;return createElement(Picker$1,{testID:name,selectedValue:selectedValue,mode:inline?"dropdown":"dialog",style:style,onValueChange:this.props.onValueChange,key:`${name}$picker`,enabled:!disabled},items.map(DropDownAndroid.renderItem))}static renderItem(item,index){const{value:value,label:label}=item;return createElement(Picker$1.Item,{label:label,value:value,key:value,testID:`dropDownItem${index}`})}}class DropDownIOS extends Component{constructor(){super(...arguments),this.state={pickerVisible:!1},this.togglePickerHandler=this.togglePicker.bind(this)}render(){const{selectedValue:selectedValue,valueStyle:valueStyle,style:style,disabled:disabled}=this.props,{pickerVisible:pickerVisible}=this.state,props=Object.assign(Object.assign({},this.props),{onClose:this.props.onClose||this.togglePickerHandler}),picker=this.props.inline?createElement(Picker,Object.assign({},props)):inModal(Picker,props);return createElement(View,{style:style},createElement(TouchableOpacity,{onPress:this.togglePickerHandler,key:"button",disabled:disabled,testID:`${this.props.name}$openButton`,accessible:!1},createElement(Text,{style:valueStyle},this.getSelectedLabel(selectedValue))),pickerVisible?picker:null)}togglePicker(){this.setState(state=>({pickerVisible:!state.pickerVisible}))}getSelectedLabel(value){if(0===this.props.items.length)return"";const item=this.props.items.find(item=>item.value===value);return item?item.label:this.props.items[0].label}}class Picker extends Component{constructor(){super(...arguments),this.state={selectedValue:this.props.selectedValue},this.onValueChangeHandler=this.onValueChange.bind(this)}render(){const{valueStyle:valueStyle,items:items,pickerStyle:pickerStyle,name:name}=this.props,{selectedValue:selectedValue}=this.state;return createElement(PickerIOS,{selectedValue:selectedValue,itemStyle:valueStyle,onValueChange:this.onValueChangeHandler,style:pickerStyle,key:`picker${name}`},items.map(Picker.renderItem))}onValueChange(value){this.setState({selectedValue:value}),this.props.onValueChange(value)}static renderItem(item){const{value:value,label:label}=item;return createElement(PickerIOS.Item,{label:label,value:value,key:value})}}const inModal=(Component,props)=>createElement(Modal,{animationType:"fade",key:"modal",transparent:!0},createElement(TouchableWithoutFeedback,{accessible:!1,onPress:props.onClose},createElement(View,{style:modalStyles.modalWrapper},createElement(View,{style:[props.backdropStyle,modalStyles.backDrop]}),createElement(View,{style:modalStyles.container},createElement(View,{style:[modalStyles.topWrapper,props.topStyle]},createElement(Button,{testID:`${props.name}$closeButton`,title:translate("mxui.widget.native","ModalDialog.close"),onPress:props.onClose})),createElement(Component,Object.assign({},props)))))),modalStyles=StyleSheet.create({modalWrapper:{backgroundColor:"rgba(0, 0, 0, 0.3)",flex:1,flexDirection:"row",alignItems:"flex-end"},backDrop:{position:"absolute",height:"100%",width:"100%"},container:{backgroundColor:"#FFFFFF",flex:1},topWrapper:{alignItems:"flex-end"}});class DropDownControl extends Component{constructor(){super(...arguments),this.state={pickerVisible:!1},this.onValueChangeHandler=this.onValueChange.bind(this)}render(){const style=function(styles){const _a=flatten(styles),{label:labelStyle}=_a,other=__rest(_a,["label"]),[labelProps,label]=extract(labelStyle,["numberOfLines"]);return Object.assign({labelProps:labelProps,label:label},other)}(this.props.style),{name:name,inline:inline,disabled:disabled,selectedValue:selectedValue,items:items}=this.props,commonProps={name:name,inline:inline,disabled:disabled,key:name,items:items,selectedValue:selectedValue,onValueChange:this.onValueChangeHandler},valueStyle=[style.value,disabled?style.valueDisabled:void 0];return createElement(InputContainer,{name:this.props.name,label:this.props.label,validation:this.props.validation,formOrientation:this.props.formOrientation,labelWidth:this.props.labelWidth,containerStyle:style.container,labelStyle:style.label,labelStyleProps:style.labelProps,validationMessageStyle:style.validationMessage},"android"===Platform.OS?createElement(DropDownAndroid,Object.assign({},commonProps,{style:valueStyle})):createElement(DropDownIOS,Object.assign({},commonProps,{pickerStyle:style.pickerIOS,topStyle:style.pickerTopIOS,backdropStyle:style.pickerBackdropIOS,valueStyle:valueStyle})))}onValueChange(value){value!==this.props.selectedValue&&this.props.onValueChange(value)}}export{DropDownControl as D};
