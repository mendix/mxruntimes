import{o as attributeToClientValue}from"./3c905f8d.js";class DateTimeFormatter{constructor(format){this.defaultConfig=format}format(value,config){return!value||isNaN(value.getTime())?"":mx.parser.formatValue(value.getTime(),"DateTime",config||this.defaultConfig)}parse(value,config){const result=mx.parser.parseValue(value,"DateTime",config||this.defaultConfig);return null===result||result&&isNaN(result.getTime())?{valid:!1}:{valid:!0,value:""!==result?result:void 0}}getFormatPlaceholder(){return mx.parser.getDateFormatPlaceholder(this.defaultConfig)}}class EnumFormatter{constructor(universe){this.universe=universe}format(value,_){const entry=this.universe.find(e=>e.key===value);return entry?entry.caption:value?value.toString():""}parse(_value,_config){throw new Error("Enumeration values cannot be parsed")}getFormatPlaceholder(){}}class NumberFormatter{constructor(attributeType,format){this.attributeType=attributeType,this.defaultConfig=format}format(value,config){return value?mx.parser.formatValue(value,this.attributeType,config||this.defaultConfig):""}parse(inputValue,config){const result=mx.parser.parseValue(inputValue,this.attributeType,config||this.defaultConfig);return null===result?{valid:!1}:{valid:!0,value:""!==result?result:void 0}}getFormatPlaceholder(){}}function createFormatter(entity,attribute,config){const metaObject=mx.meta.getEntity(entity),attributeType=metaObject.getAttributeType(attribute);return attributeType?"Enum"===attributeType?new EnumFormatter(metaObject.getEnumMap(attribute)):createNonEnumFormatter(attributeType,config):{format:()=>"",parse:()=>{throw new Error("Cannot parse values for unresolved attribute")},getFormatPlaceholder:()=>void 0}}function createNonEnumFormatter(attributeType,config){switch(attributeType){case"DateTime":return new DateTimeFormatter(config.dateFormat||{type:"date"});case"Float":case"Currency":case"Integer":case"Long":case"Decimal":return new NumberFormatter(attributeType,config.numberFormat||{groupDigits:!1});default:return{format:value=>void 0!==value?mx.parser.formatValue(attributeToClientValue(value),attributeType):"",parse:inputValue=>{const value=mx.parser.parseValue(inputValue,attributeType);return null!==value?{valid:!0,value:value}:{valid:!1}},getFormatPlaceholder:()=>void 0}}}export{createFormatter as a,createNonEnumFormatter as b};
