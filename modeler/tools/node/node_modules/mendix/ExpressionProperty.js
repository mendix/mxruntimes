import"./481d180e.js";import{e as ensure}from"./546dec4f.js";import{b as asPureProperty}from"./74fbff8f.js";import"./2bc24ff8.js";import{p as pageScope,s as stateUnavailable}from"./989522c0.js";import"./2209f9e8.js";import"./5b471fcd.js";import"./fdd4c4ff.js";import"./2776a567.js";import"./75bfae42.js";import{a as EmptyVariableAccessError,A as AccessDeniedError}from"./a95bec4a.js";import{d as asDynamicValue,a as available,l as loading}from"./6dbf3b84.js";import"./2ff2b659.js";import{e as evaluateExpression$}from"./a9a42d77.js";const ExpressionProperty=asPureProperty((config,store)=>{try{const value=evaluateExpression$(config.expression,{pageTitle:()=>ensure(store.get$(pageScope,"form"))[0].getTitle(),currentObject:()=>{const mxObjectState=store.get$(config.scope,"object");return mxObjectState!==stateUnavailable?mxObjectState:void 0}});return asDynamicValue(available(value))}catch(e){if(e instanceof EmptyVariableAccessError||e instanceof AccessDeniedError)return asDynamicValue(loading());throw e}});export{ExpressionProperty};
