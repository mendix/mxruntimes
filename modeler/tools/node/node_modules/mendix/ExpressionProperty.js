import"./ef69c932.js";import"./53bf75a6.js";import{e as ensure}from"./567083d6.js";import{a as asProperty}from"./e3b801f3.js";import"./2bc24ff8.js";import{p as pageScope,s as stateUnavailable}from"./ceec5c0e.js";import"./fdd4c4ff.js";import"./36940eec.js";import"./7ff5ebd0.js";import"./a4defc10.js";import"./573c00fc.js";import{h as asDynamicValue,a as available,l as loading}from"./fa6b075c.js";import{a as EmptyVariableAccessError,A as AccessDeniedError}from"./0878db2e.js";import{e as evaluateExpression$}from"./6ac69fda.js";const ExpressionProperty=asProperty((config,store)=>{const result=asDynamicValue(()=>{try{const value=evaluateExpression$(config.expression,{pageTitle:()=>ensure(store.get$(pageScope,"form"))[0].getTitle(),currentObject:()=>{const mxObjectState=store.get$(config.scope,"object");return mxObjectState!==stateUnavailable?mxObjectState:void 0}});return available(value)}catch(e){if(e instanceof EmptyVariableAccessError||e instanceof AccessDeniedError)return loading();throw e}});return()=>result.get()});export{ExpressionProperty};
