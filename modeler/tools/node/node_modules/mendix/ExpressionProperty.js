import"./5dda5eb7.js";import{d as ensure}from"./ddd19e5a.js";import{d as asPureProperty}from"./71d615f7.js";import"./3019ed1f.js";import"./967e2ac0.js";import"./d9069e30.js";import"./d5eebceb.js";import"./eed44530.js";import"./aa3ddc5d.js";import{b as pageScope,c as stateUnavailable}from"./2a30f3af.js";import"./3c905f8d.js";import"./b26e8ded.js";import{a as Evaluator,b as expressionFunctions,c as createExpressionTokens,e as EmptyVariableAccessError,f as AccessDeniedError,d as Resolver}from"./a81bf7bc.js";import{i as asDynamicValue,d as available,a as loading}from"./cf055752.js";import{a as subscriptionDependency}from"./86e285ad.js";const evaluator=new Evaluator(expressionFunctions,createExpressionTokens(()=>new Date)),ExpressionProperty=asPureProperty((config,store)=>{const mxFormState=ensure(store.get(pageScope,"form")),resolver=new Resolver({pageTitle:()=>mxFormState[0].getTitle(),currentObject:()=>{const mxObjectState=store.get(config.scope,"object");return mxObjectState!==stateUnavailable?mxObjectState:void 0}});try{const value=evaluator.evaluate(config.expression,resolver);return resolver.getDependencies().map(dependency=>subscriptionDependency(`${dependency.tag}`,dependency)).forEach(atom=>atom.reportObserved()),asDynamicValue(available(value))}catch(e){if(e instanceof EmptyVariableAccessError||e instanceof AccessDeniedError)return asDynamicValue(loading());throw e}});export{ExpressionProperty};
