import"./39c2a2fb.js";import{e as ensure}from"./546dec4f.js";import{b as asPureProperty}from"./d63ed225.js";import"./2bc24ff8.js";import{p as pageScope,s as stateUnavailable}from"./e1d6c916.js";import"./2209f9e8.js";import"./0c69f47a.js";import"./fdd4c4ff.js";import"./37fca272.js";import"./38d79760.js";import{E as Evaluator,e as expressionFunctions,c as createExpressionTokens,a as EmptyVariableAccessError,A as AccessDeniedError,R as Resolver}from"./92c47dca.js";import{d as asDynamicValue,a as available,l as loading}from"./6dbf3b84.js";import{s as subscriptionDependency}from"./b4041520.js";const evaluator=new Evaluator(expressionFunctions,createExpressionTokens(()=>new Date)),ExpressionProperty=asPureProperty((config,store)=>{const mxFormState=ensure(store.get(pageScope,"form")),resolver=new Resolver({pageTitle:()=>mxFormState[0].getTitle(),currentObject:()=>{const mxObjectState=store.get(config.scope,"object");return mxObjectState!==stateUnavailable?mxObjectState:void 0}});try{const value=evaluator.evaluate(config.expression,resolver);return resolver.getDependencies().map(dependency=>subscriptionDependency(`${dependency.tag}`,dependency)).forEach(atom=>atom.reportObserved()),asDynamicValue(available(value))}catch(e){if(e instanceof EmptyVariableAccessError||e instanceof AccessDeniedError)return asDynamicValue(loading());throw e}});export{ExpressionProperty};
