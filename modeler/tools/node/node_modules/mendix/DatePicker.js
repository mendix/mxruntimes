import{View,DatePickerAndroid as DatePickerAndroid$1,TimePickerAndroid,StyleSheet,DatePickerIOS as DatePickerIOS$1,Modal,TouchableWithoutFeedback,Button,Platform,Text,TouchableNativeFeedback,TouchableOpacity}from"react-native";import{Component,createElement,Fragment,Children}from"react";import{A as AssertionError}from"./546dec4f.js";import"./2bc24ff8.js";import"./2209f9e8.js";import{t as translate}from"./27e4dcbd.js";import"./5b471fcd.js";import"./d2546a03.js";import{p as pluckFromList,e as exclude,o as only}from"./c979549b.js";import{_ as __rest}from"./db3af15f.js";import{A as Alert}from"./3107acfa.js";class DatePickerAndroid extends Component{constructor(){super(...arguments),this.onDatePressHandler=this.onDatePress.bind(this)}async onDatePress(){if(this.props.inputValue.readOnly)return;this.dispatchAction("onEnter");const initialDate="available"===this.props.inputValue.status&&void 0===this.props.inputValue.value?new Date:this.props.inputValue.value;try{const selectedDate=await this.selectDate(initialDate).then(this.selectTime.bind(this));this.props.inputValue.setValue(selectedDate)}catch(e){}finally{this.dispatchAction("onLeave")}}render(){const styleMap=componentStyleMap(this.props.style,this.props);return createElement(Fragment,null,createElement(View,{key:"container",style:styleMap.containerStyle},createElement(DatePickerLabel,{key:"label",name:this.props.name,label:this.props.label,style:styleMap.label,props:styleMap.labelProps}),createElement(DatePickerValue,{key:"value",name:this.props.name,inputValue:this.props.inputValue,placeholder:this.props.placeholder,onPress:this.onDatePressHandler,style:styleMap.inputContainerStyle,textStyle:styleMap.value,textDisabledStyle:styleMap.valueDisabled,placeholderStyle:styleMap.placeholder,placeholderDisabledStyle:styleMap.placeholderDisabled,validationMessageStyle:styleMap.validationMessage})))}async selectDate(initialDate){if("date"===this.props.mode||"datetime"===this.props.mode){const result=await DatePickerAndroid$1.open({date:initialDate});if(result.action===DatePickerAndroid$1.dateSetAction&&result.year&&void 0!==result.month&&result.day)return new Date(result.year,result.month,result.day);throw new AssertionError}return initialDate}async selectTime(initialDate){if("time"===this.props.mode||"datetime"===this.props.mode){const result=await TimePickerAndroid.open({hour:initialDate.getHours(),minute:initialDate.getMinutes()});if(result.action===TimePickerAndroid.timeSetAction){const date=new Date(initialDate);return date.setHours(result.hour,result.minute),date}throw new AssertionError}return initialDate}dispatchAction(property){const prop=this.props[property];"available"===this.props.inputValue.status&&prop&&prop.execute()}}class DatePickerIOS extends Component{constructor(props){super(props),this.onDateChangeHandler=this.onDateChange.bind(this),this.onDatePressHandler=this.onDatePress.bind(this),this.onToggleHandler=this.toggleVisibility.bind(this,!0),this.state={visible:!1}}onDateChange(newDate){const inputValue=this.props.inputValue;"available"!==inputValue.status||inputValue.readOnly||this.props.inputValue.setValue(newDate)}onDatePress(){this.props.inputValue.readOnly||("available"===this.props.inputValue.status&&void 0===this.props.inputValue.value?(this.dispatchAction("onEnter"),this.onDateChange(new Date),this.toggleVisibility(!1)):this.toggleVisibility())}toggleVisibility(dispatchEvents=!0){this.setState(state=>({visible:!state.visible}),()=>dispatchEvents&&this.dispatchAction(this.state.visible?"onEnter":"onLeave"))}render(){const styleMap=componentStyleMap(this.props.style,this.props);return createElement(Fragment,null,createElement(View,{key:"container",style:styleMap.containerStyle},createElement(DatePickerLabel,{key:"label",name:this.props.name,label:this.props.label,style:styleMap.label,props:styleMap.labelProps}),createElement(DatePickerValue,{key:"value",name:this.props.name,inputValue:this.props.inputValue,placeholder:this.props.placeholder,onPress:this.onDatePressHandler,style:styleMap.inputContainerStyle,textStyle:styleMap.value,textDisabledStyle:styleMap.valueDisabled,placeholderStyle:styleMap.placeholder,placeholderDisabledStyle:styleMap.placeholderDisabled,validationMessageStyle:styleMap.validationMessage})),this.renderDatePicker())}renderDatePicker(){if(!this.state.visible)return null;const datePicker=createElement(DatePickerIOS$1,{key:"datePicker",date:this.props.inputValue.value,onDateChange:this.onDateChangeHandler,mode:this.props.mode});return this.props.inline?datePicker:this.renderModal(datePicker)}renderModal(child){return createElement(Modal,{key:"modal",transparent:!0,onRequestClose:()=>{}},createElement(TouchableWithoutFeedback,{accessible:!1,onPress:this.onToggleHandler},createElement(View,{style:defaultStyles.backdropWrapper},createElement(View,{style:defaultStyles.container},createElement(View,{style:defaultStyles.topWrapper},createElement(Button,{testID:`${this.props.name}$closeButton`,title:translate("mxui.widget.native","ModalDialog.close"),onPress:this.onToggleHandler})),child))))}dispatchAction(property){const prop=this.props[property];"available"===this.props.inputValue.status&&prop&&prop.execute()}}const defaultStyles=StyleSheet.create({backdropWrapper:{backgroundColor:"rgba(0, 0, 0, 0.3)",flex:1,flexDirection:"row",alignItems:"flex-end"},container:{backgroundColor:"#FFFFFF",flex:1},topWrapper:{alignItems:"flex-end"}}),DatePicker=props=>createElement("android"===Platform.OS?DatePickerAndroid:DatePickerIOS,props),DatePickerLabel=({name:name,label:label,style:style,props:props})=>label&&void 0!==label.value?createElement(Text,Object.assign({testID:`${name}$label`,style:style},props),label.value):null,DatePickerValue=props=>{const editable=!props.inputValue.readOnly,Touchable="android"===Platform.OS?TouchableNativeFeedback:TouchableOpacity,displayValue=getDisplayValue(props.inputValue,props.placeholder),validation=props.inputValue.validation,showPlaceholder=!props.inputValue.value,textStyles=[...props.textStyle,...editable?[]:props.textDisabledStyle,...showPlaceholder?props.placeholderStyle:[],...showPlaceholder&&!editable?props.placeholderDisabledStyle:[]];return createElement(View,{style:props.style},createElement(_a=>{var{children:children}=_a,feedbackProps=__rest(_a,["children"]);return editable?createElement(Touchable,Object.assign({onPress:()=>props.onPress()},feedbackProps),children):Children.only(children)},{key:"touchable",testID:`${props.name}$value`,accessible:!0,accessibilityLabel:displayValue},createElement(Text,{key:"value",testID:`${props.name}$value`,style:textStyles},displayValue)),createElement(Alert,{key:"error",testID:`${props.name}$alert`,error:validation,style:props.validationMessageStyle}))},getDisplayValue=(inputValue,placeholder)=>inputValue.value?inputValue.displayValue:placeholder.value||" ",componentStyleMap=(style,props)=>{const labelStylePropsKeys=["numberOfLines"],isHorizontal="horizontal"===props.formOrientation;return{label:[...pluckFromList(style,"label").map(labelStyle=>exclude(labelStyle,labelStylePropsKeys)),isHorizontal?{flex:props.labelWidth}:void 0],labelProps:pluckFromList(style,"label").map(labelStyle=>only(labelStyle,labelStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),value:pluckFromList(style,"value").filter(t=>!!t),valueDisabled:pluckFromList(style,"valueDisabled").filter(t=>!!t),inputContainerStyle:[{flexDirection:"column"},isHorizontal?{flex:12-props.labelWidth}:void 0],placeholder:pluckFromList(style,"placeholder").filter(t=>!!t),placeholderDisabled:pluckFromList(style,"placeholderDisabled").filter(t=>!!t),validationMessage:pluckFromList(style,"validationMessage").filter(t=>!!t),containerStyle:[...pluckFromList(style,"container"),isHorizontal?{flexDirection:"row",alignItems:"center"}:void 0]}};export{DatePicker,DatePickerLabel,DatePickerValue,componentStyleMap};
