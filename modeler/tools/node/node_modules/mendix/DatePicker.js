import{Platform,TouchableNativeFeedback,TouchableOpacity,Text,DatePickerAndroid as DatePickerAndroid$1,TimePickerAndroid,StyleSheet,DatePickerIOS as DatePickerIOS$1,Modal,TouchableWithoutFeedback,View,Button}from"react-native";import"./d4030583.js";import{createElement,Children,Component,Fragment}from"react";import{A as AssertionError}from"./43297fe2.js";import"./b98156b5.js";import"./ee5a929f.js";import"big.js";import"./d6b7d05a.js";import{t as translate}from"./da601b36.js";import{_ as __rest}from"./5b829f15.js";import{f as flatten,e as extract}from"./84c5d961.js";import{I as InputContainer}from"./8e73ab64.js";const DatePickerValue=props=>{const editable=!props.inputValue.readOnly,Touchable="android"===Platform.OS?TouchableNativeFeedback:TouchableOpacity,displayValue=getDisplayValue(props.inputValue,props.placeholder),showPlaceholder=!props.inputValue.value,textStyles=[props.textStyle,editable?void 0:props.textDisabledStyle,showPlaceholder?props.placeholderStyle:void 0,showPlaceholder&&!editable?props.placeholderDisabledStyle:void 0];return createElement(_a=>{var{children:children}=_a,feedbackProps=__rest(_a,["children"]);return editable?createElement(Touchable,Object.assign({onPress:()=>props.onPress()},feedbackProps),children):Children.only(children)},{accessible:!0,accessibilityLabel:displayValue,testID:"android"===Platform.OS?`${props.name}$value`:void 0},createElement(Text,{style:textStyles,testID:"ios"===Platform.OS?`${props.name}$value`:void 0},displayValue))},getDisplayValue=(inputValue,placeholder)=>inputValue.value?inputValue.displayValue:placeholder.value||" ";class DatePickerAndroid extends Component{constructor(){super(...arguments),this.onDatePressHandler=this.onDatePress.bind(this)}async onDatePress(){if(this.props.inputValue.readOnly)return;this.dispatchAction(this.props.onEnter);const initialDate="available"===this.props.inputValue.status&&void 0===this.props.inputValue.value?new Date:this.props.inputValue.value;try{const selectedDate=await this.selectDate(initialDate).then(this.selectTime.bind(this));this.props.inputValue.setValue(selectedDate)}catch(e){}finally{this.dispatchAction(this.props.onLeave)}}render(){const style=processStyles(this.props.style);return createElement(InputContainer,{name:this.props.name,label:this.props.label,validation:this.props.inputValue.validation,formOrientation:this.props.formOrientation,labelWidth:this.props.labelWidth,containerStyle:style.container,labelStyle:style.label,labelStyleProps:style.labelProps,validationMessageStyle:style.validationMessage},createElement(DatePickerValue,{name:this.props.name,inputValue:this.props.inputValue,placeholder:this.props.placeholder,onPress:this.onDatePressHandler,textStyle:style.value,textDisabledStyle:style.valueDisabled,placeholderStyle:style.placeholder,placeholderDisabledStyle:style.placeholderDisabled}))}async selectDate(initialDate){if("date"===this.props.mode||"datetime"===this.props.mode){const result=await DatePickerAndroid$1.open({date:initialDate});if(result.action===DatePickerAndroid$1.dateSetAction&&result.year&&void 0!==result.month&&result.day)return new Date(result.year,result.month,result.day);throw new AssertionError}return initialDate}async selectTime(initialDate){if("time"===this.props.mode||"datetime"===this.props.mode){const result=await TimePickerAndroid.open({hour:initialDate.getHours(),minute:initialDate.getMinutes()});if(result.action===TimePickerAndroid.timeSetAction){const date=new Date(initialDate);return date.setHours(result.hour,result.minute),date}throw new AssertionError}return initialDate}dispatchAction(action){"available"===this.props.inputValue.status&&action&&action.execute()}}class DatePickerIOS extends Component{constructor(){super(...arguments),this.state={visible:!1},this.onDateChangeHandler=this.onDateChange.bind(this),this.onDatePressHandler=this.onDatePress.bind(this),this.onToggleHandler=this.toggleVisibility.bind(this,!0)}onDateChange(newDate){const inputValue=this.props.inputValue;"available"!==inputValue.status||inputValue.readOnly||this.props.inputValue.setValue(newDate)}onDatePress(){this.props.inputValue.readOnly||("available"===this.props.inputValue.status&&void 0===this.props.inputValue.value?(this.dispatchAction(this.props.onEnter),this.onDateChange(new Date),this.toggleVisibility(!1)):this.toggleVisibility())}toggleVisibility(dispatchEvents=!0){this.setState(state=>({visible:!state.visible}),()=>dispatchEvents&&this.dispatchAction(this.state.visible?this.props.onEnter:this.props.onLeave))}render(){const style=processStyles(this.props.style);return createElement(Fragment,null,createElement(InputContainer,{name:this.props.name,label:this.props.label,validation:this.props.inputValue.validation,formOrientation:this.props.formOrientation,labelWidth:this.props.labelWidth,containerStyle:style.container,labelStyle:style.label,labelStyleProps:style.labelProps,validationMessageStyle:style.validationMessage},createElement(DatePickerValue,{name:this.props.name,inputValue:this.props.inputValue,placeholder:this.props.placeholder,onPress:this.onDatePressHandler,textStyle:style.value,textDisabledStyle:style.valueDisabled,placeholderStyle:style.placeholder,placeholderDisabledStyle:style.placeholderDisabled})),this.renderDatePicker())}renderDatePicker(){if(!this.state.visible)return null;const datePicker=createElement(DatePickerIOS$1,{date:this.props.inputValue.value,onDateChange:this.onDateChangeHandler,mode:this.props.mode});return this.props.inline?datePicker:this.renderModal(datePicker)}renderModal(child){return createElement(Modal,{transparent:!0,onRequestClose:()=>{}},createElement(TouchableWithoutFeedback,{accessible:!1,onPress:this.onToggleHandler},createElement(View,{style:defaultStyles.backdropWrapper},createElement(View,{style:defaultStyles.container},createElement(View,{style:defaultStyles.topWrapper},createElement(Button,{testID:`${this.props.name}$closeButton`,title:translate("mxui.widget.native","ModalDialog.close"),onPress:this.onToggleHandler})),child))))}dispatchAction(action){"available"===this.props.inputValue.status&&action&&action.execute()}}const defaultStyles=StyleSheet.create({backdropWrapper:{backgroundColor:"rgba(0, 0, 0, 0.3)",flex:1,flexDirection:"row",alignItems:"flex-end"},container:{backgroundColor:"#FFFFFF",flex:1},topWrapper:{alignItems:"flex-end"}}),DatePicker=props=>createElement("android"===Platform.OS?DatePickerAndroid:DatePickerIOS,props);function processStyles(styles){const _a=flatten(styles),{label:labelStyle}=_a,other=__rest(_a,["label"]),[labelProps,label]=extract(labelStyle,["numberOfLines"]);return Object.assign({label:label,labelProps:labelProps},other)}export{DatePicker,processStyles};
