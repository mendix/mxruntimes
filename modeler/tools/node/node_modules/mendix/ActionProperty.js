import{o as observable,f as computed,a as action}from"./481d180e.js";import{m as mapValues,e as ensure}from"./546dec4f.js";import{a as asProperty}from"./74fbff8f.js";import"./2bc24ff8.js";import{p as pageScope}from"./989522c0.js";import"./2209f9e8.js";import{t as translate}from"./27e4dcbd.js";import"./5b471fcd.js";import{V as ValidationError}from"./d2546a03.js";import"./fdd4c4ff.js";import"./63a19f1e.js";import"./2776a567.js";import"./75bfae42.js";import"./a95bec4a.js";import"./6f5760d1.js";import{c as getOrCrashL}from"./6dbf3b84.js";import"./2ff2b659.js";import"./bb273487.js";import{g as getActionParameters$}from"./1f6ebd2f.js";import{e as executeAction}from"./32b9ee02.js";const ActionProperty=asProperty((config,store,widgetId)=>{const actionsInProgress=observable.box(0),isExecuting=computed(()=>actionsInProgress.get()>0);return()=>{const parameters=getActionParameters$(config.action.argMap,store),canExecute=Object.values(parameters).every(p=>"available"===p.status);return{canExecute:canExecute,isExecuting:isExecuting.get(),execute:canExecute?action(()=>(function(parameters){if(Object.keys(parameters).some(arg=>{const parameter=parameters[arg];return"selection"===config.action.argMap[arg].source&&void 0!==parameter&&"objects"in parameter&&0===parameter.objects.length}))return void mx.ui.showMessage("info",translate("mxui.widget.DataGrid","no_selection"),!1);const isInvalid=store.get$(widgetId,"isInvalid"),currentForm=ensure(store.get$(pageScope,"form"))[0];actionsInProgress.set(actionsInProgress.get()+1),executeAction(config.action,{abortOnClientValidations:!0,abortOnServerValidations:config.abortOnServerValidation,widgetIsValid:!isInvalid,currentForm:currentForm},parameters,action(()=>{actionsInProgress.set(actionsInProgress.get()-1)}),action(e=>{actionsInProgress.set(actionsInProgress.get()-1),e instanceof ValidationError||mx.onError(e)}))})(mapValues(parameters,getOrCrashL))):()=>mx.logger.debug(`Widget is attempting to execute a ${config.action.type} action which is not executable.`)}}});export{ActionProperty};
