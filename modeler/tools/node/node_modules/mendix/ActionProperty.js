import"./d5eebceb.js";import{f as observable$$1,h as computed$$1,b as glitchFree}from"./6727fec8.js";import"./eed44530.js";import"./aa3ddc5d.js";import{m as mapValues,d as ensure}from"./ff203afa.js";import"./02d97a6c.js";import{c as asProperty}from"./71d615f7.js";import"./3019ed1f.js";import"./967e2ac0.js";import{a as translate}from"./b0b3290e.js";import"./d9069e30.js";import{a as ValidationError}from"./ecb7231a.js";import{b as pageScope}from"./b3fab43d.js";import"./7d776635.js";import"./4b8e45df.js";import"./eaafd07f.js";import{h as getOrCrashL}from"./7a470c91.js";import"./12049987.js";import"./8a992959.js";import{c as getActionParameters}from"./41f30614.js";import{a as executeAction}from"./d203c618.js";const ActionProperty=asProperty((config,store,widgetId)=>{const actionsInProgress=observable$$1.box(0),isExecuting=computed$$1(()=>actionsInProgress.get()>0);return()=>{const parameters=getActionParameters(config.action.argMap,store),canExecute=Object.values(parameters).every(p=>"available"===p.status);return{canExecute:canExecute,isExecuting:isExecuting.get(),execute:canExecute?glitchFree(()=>(function(parameters){if(Object.keys(parameters).some(arg=>{const parameter=parameters[arg];return"selection"===config.action.argMap[arg].source&&void 0!==parameter&&"objects"in parameter&&0===parameter.objects.length}))return void mx.ui.showMessage("info",translate("mxui.widget.DataGrid","no_selection"),!1);const isInvalid=store.get(widgetId,"isInvalid"),currentForm=ensure(store.get(pageScope,"form"))[0];actionsInProgress.set(actionsInProgress.get()+1),executeAction(config.action,{abortOnClientValidations:!0,abortOnServerValidations:config.abortOnServerValidation,widgetIsValid:!isInvalid,currentForm:currentForm},parameters,glitchFree(()=>{actionsInProgress.set(actionsInProgress.get()-1)}),glitchFree(e=>{actionsInProgress.set(actionsInProgress.get()-1),e instanceof ValidationError||mx.onError(e)}))})(mapValues(parameters,getOrCrashL))):()=>mx.logger.debug(`Widget is attempting to execute a ${config.action.type} action which is not executable.`)}}});export{ActionProperty};
