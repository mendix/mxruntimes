import{o as observable,d as computed,a as action}from"./d4030583.js";import"./43297fe2.js";import{m as mapValues,e as ensure}from"./c49f953c.js";import"./0e7164f2.js";import"./b98156b5.js";import"./ee5a929f.js";import{e as getOrCrashL}from"./189c82c6.js";import"big.js";import{p as pageScope}from"./8676e47e.js";import{a as asProperty}from"./72a4665b.js";import{D as DescribedError}from"./d6b7d05a.js";import{t as translate}from"./da601b36.js";import{V as ValidationError}from"./e7efb4be.js";import"./df897ee2.js";import"./2745d635.js";import{e as getActionParameters$}from"./49a60b8f.js";import"./7ca6d1ae.js";import"./5dae8521.js";import{e as executeAction}from"./459bd237.js";const ActionProperty=asProperty((config,store,widgetId)=>{const actionsInProgress=observable.box(0),isExecuting=computed(()=>actionsInProgress.get()>0);return()=>{const parameters=getActionParameters$(config.action.argMap,store),canExecute=Object.values(parameters).every(p=>"available"===p.status);return{canExecute:canExecute,isExecuting:isExecuting.get(),execute:canExecute?action(()=>(function(parameters){if(Object.keys(parameters).some(arg=>{const parameter=parameters[arg];return"selection"===config.action.argMap[arg].source&&void 0!==parameter&&"objects"in parameter&&0===parameter.objects.length}))return void mx.ui.showMessage("info",translate("mxui.widget.DataGrid","no_selection"),!1);const isInvalid=store.get$(widgetId,"isInvalid"),currentForm=ensure(store.get$(pageScope,"form"))[0];actionsInProgress.set(actionsInProgress.get()+1),executeAction(config.action,{abortOnClientValidations:!0,abortOnServerValidations:config.abortOnServerValidation,widgetIsValid:!isInvalid,currentForm:currentForm},parameters,action(()=>{actionsInProgress.set(actionsInProgress.get()-1)}),action(e=>{actionsInProgress.set(actionsInProgress.get()-1),e instanceof DescribedError?mx.onError(e):e instanceof ValidationError||mx.onError(new Error(`An error occurred while executing ${config.friendlyId}: ${e.message}`))}))})(mapValues(parameters,getOrCrashL))):()=>mx.logger.debug(`Widget is attempting to execute a ${config.action.type} action which is not executable.`)}}});export{ActionProperty};
