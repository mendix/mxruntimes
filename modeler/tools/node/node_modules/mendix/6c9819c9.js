import{Picker as Picker$1,StyleSheet,Modal,TouchableWithoutFeedback,View,Button,TouchableOpacity,Text,PickerIOS,Platform}from"react-native";import{Component,createElement}from"react";import{t as translate}from"./9df15dda.js";import{p as pluckFromList,e as exclude,o as only}from"./c979549b.js";import{A as Alert}from"./3107acfa.js";class DropDownAndroid extends Component{constructor(props){super(props),this.onValueChange=this.onValueChange.bind(this)}render(){const{name:name,inline:inline,style:style,items:items,disabled:disabled,selectedValue:selectedValue}=this.props;return createElement(Picker$1,{testID:name,selectedValue:selectedValue,mode:inline?"dropdown":"dialog",style:style,onValueChange:this.onValueChange,key:`${name}$picker`,enabled:!disabled},items.map(DropDownAndroid.renderItem))}onValueChange(value){this.props.onValueChange&&this.props.onValueChange(value)}static renderItem(item,index){const{value:value,label:label}=item;return createElement(Picker$1.Item,{label:label,value:value,key:value,testID:`dropDownItem${index}`})}}class DropDownIOS extends Component{constructor(props){super(props),this.state={pickerVisible:!1},this.togglePicker=this.togglePicker.bind(this)}render(){const{selectedValue:selectedValue,valueStyle:valueStyle,style:style,disabled:disabled}=this.props,{pickerVisible:pickerVisible}=this.state,props=Object.assign({},this.props,{onClose:this.props.onClose||this.togglePicker}),picker=this.props.inline?createElement(Picker,Object.assign({},props)):inModal(Picker,props);return createElement(View,{style:style},createElement(TouchableOpacity,{onPress:()=>this.togglePicker(),key:"button",disabled:disabled,testID:`${this.props.name}$openButton`,accessible:!1},createElement(Text,{style:valueStyle},this.getSelectedLabel(selectedValue))),pickerVisible?picker:null)}togglePicker(){this.setState(state=>({pickerVisible:!state.pickerVisible}))}getSelectedLabel(value){if(0===this.props.items.length)return"";const item=this.props.items.find(item=>item.value===value);return item?item.label:this.props.items[0].label}}class Picker extends Component{constructor(props){super(props),this.state={selectedValue:this.props.selectedValue},this.onValueChange=this.onValueChange.bind(this)}render(){const{valueStyle:valueStyle,items:items,pickerStyle:pickerStyle,name:name}=this.props,{selectedValue:selectedValue}=this.state;return createElement(PickerIOS,{selectedValue:selectedValue,itemStyle:valueStyle,onValueChange:this.onValueChange,style:pickerStyle,key:`picker${name}`},items.map(Picker.renderItem))}onValueChange(value){this.setState({selectedValue:value}),this.props.onValueChange&&this.props.onValueChange(value)}static renderItem(item){const{value:value,label:label}=item;return createElement(PickerIOS.Item,{label:label,value:value,key:value})}}const inModal=(Component,props)=>createElement(Modal,{animationType:"fade",key:"modal",transparent:!0},createElement(TouchableWithoutFeedback,{accessible:!1,onPress:props.onClose},createElement(View,{style:modalStyles.modalWrapper},createElement(View,{style:[...props.backdropStyle||[],{position:"absolute",height:"100%",width:"100%"}]}),createElement(View,{style:modalStyles.container},createElement(View,{style:[modalStyles.topWrapper,...props.topStyle||[]]},createElement(Button,{testID:`${props.name}$closeButton`,title:translate("mxui.widget.native","ModalDialog.close"),onPress:props.onClose})),createElement(Component,Object.assign({},props)))))),modalStyles=StyleSheet.create({modalWrapper:{backgroundColor:"rgba(0, 0, 0, 0.3)",flex:1,flexDirection:"row",alignItems:"flex-end"},container:{backgroundColor:"#FFFFFF",flex:1},topWrapper:{alignItems:"flex-end"}}),Label=({name:name,label:label,style:style,props:props})=>label?createElement(Text,Object.assign({testID:name,style:style},props),label.value):null;class DropDownControl extends Component{constructor(props){super(props),this.state={pickerVisible:!1},this.onValueChange=this.onValueChange.bind(this)}render(){const{name:name,inline:inline,disabled:disabled,selectedValue:selectedValue,items:items,style:style,label:label,validation:validation,validationMessageStyles:validationMessageStyles}=this.props,{labelStyles:labelStyles,labelStyleProps:labelStyleProps,containerStyle:containerStyle,inputContainerStyle:inputContainerStyle}=this.processStyles(),commonProps={name:name,inline:inline,disabled:disabled,key:name,items:items,selectedValue:selectedValue,onValueChange:this.onValueChange},valueStyle=pluckFromList(style,"value")||[];return disabled&&valueStyle.push(...pluckFromList(style,"valueDisabled")||[]),createElement(View,{key:"container",style:containerStyle},createElement(Label,{name:`${name}$label`,key:`${name}$label`,label:label,style:labelStyles,props:labelStyleProps}),createElement(View,{style:inputContainerStyle},"android"===Platform.OS?createElement(DropDownAndroid,Object.assign({},commonProps,{style:valueStyle})):createElement(DropDownIOS,Object.assign({},commonProps,{pickerStyle:pluckFromList(this.props.style,"pickerIOS"),topStyle:pluckFromList(style,"pickerTopIOS"),backdropStyle:pluckFromList(style,"pickerBackdropIOS"),valueStyle:valueStyle})),createElement(Alert,{key:"error",testID:`${name}$alert`,error:validation,style:validationMessageStyles})))}onValueChange(value){value!==this.props.selectedValue&&this.props.onValueChange(value)}processStyles(){const labelStylePropsKeys=["numberOfLines"],isHorizontal="horizontal"===this.props.formOrientation,containerStyle=[...pluckFromList(this.props.style,"container"),isHorizontal?{flexDirection:"row",alignItems:"center"}:void 0],inputContainerStyle=Object.assign({flexDirection:"column"},isHorizontal?{flex:12-this.props.labelWidth}:void 0),labelDirectionStyle=isHorizontal?{flex:this.props.labelWidth}:void 0;return{labelStyles:[...pluckFromList(this.props.style,"label").map(labelStyle=>exclude(labelStyle,labelStylePropsKeys)),labelDirectionStyle],labelStyleProps:pluckFromList(this.props.style,"label").map(labelStyle=>only(labelStyle,labelStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),containerStyle:containerStyle,inputContainerStyle:inputContainerStyle}}}export{DropDownControl as D};
