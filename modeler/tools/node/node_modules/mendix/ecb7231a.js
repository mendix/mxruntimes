import{b as AssertionError,c as isJson}from"./ff203afa.js";import{d as DescribedServerError}from"./967e2ac0.js";class ConnectionError extends Error{constructor(message){super(message),Object.setPrototypeOf(this,ConnectionError.prototype)}}const middlewares=[];function registerMiddleware(middleware){middlewares.push(middleware)}async function applyMiddleware(request,actual){return async function doProcess(index,req){if(index===middlewares.length)return actual(req);return middlewares[index](req,r=>doProcess(index+1,r))}(0,request)}class ServerError extends Error{constructor(status,message){super(message),this.status=status,Object.setPrototypeOf(this,ServerError.prototype)}}class UnauthorizedError extends ServerError{constructor(status){super(status),Object.setPrototypeOf(this,UnauthorizedError.prototype)}}class ValidationError extends Error{constructor(original={}){super(),this.original=original,Object.setPrototypeOf(this,ValidationError.prototype)}}async function get(url,handleAs){const request={url:url,init:{method:"get",headers:new Headers,cache:"force-cache",credentials:"include"}},response=await applyMiddleware(request,doFetch);if(!response.ok)throw new ServerError(response.status,response.statusText);switch(handleAs){case"text":return response.text();case"json":return response.json();case"blob":return response.blob()}}async function post(url,data){const request={url:url,body:data,init:{method:"post",headers:new Headers(Object.assign({Accept:"application/json"},isJson(data)?{"Content-Type":"application/json"}:{})),redirect:"error",credentials:"include"}};return(await applyMiddleware(request,doFetch)).json()}async function doFetch(request){if(request.init.body)throw new AssertionError;let response;request.init.body=isJson(request.body)?JSON.stringify(request.body):request.body;try{response=await window.fetch(request.url,request.init)}catch(e){throw new ConnectionError(e.message)}switch(response.status){case 200:return response;case 400:case 401:case 402:case 403:case 460:throw new UnauthorizedError(response.status);case 502:case 504:throw new ServerError(response.status,response.statusText);case 551:throw new ValidationError(await response.json());case 560:const description=await getXasErrorDescription(response);throw description?new DescribedServerError(description):new ServerError(response.status);case 12029:throw new ConnectionError("No connection");default:throw new ServerError(response.status,await getXasErrorDescription(response))}}async function getXasErrorDescription(response){const json=await response.json();return json&&"description"in json?json.description:void 0}export{ValidationError as a,UnauthorizedError as b,ConnectionError as c,registerMiddleware as d,get as e,post as f};
