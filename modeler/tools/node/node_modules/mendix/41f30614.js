import"./6727fec8.js";import"./aa3ddc5d.js";import{m as mapValues,i as crash}from"./ff203afa.js";import"./02d97a6c.js";import{d as available,a as loading,e as mapL,g as getOrElseL}from"./7a470c91.js";import{a as fetchObjects,b as MxObject1}from"./8a992959.js";function getActionParameters(argMap,store){return mapValues(argMap,({source:source,widget:widget})=>{return function(state,source){if(void 0===state)return"selection"===source?available({objects:[]}):loading();if(Array.isArray(state)){const objects=mapL(fetchObjects(state),objs=>objs.map(o=>o.old()));return available({objects:getOrElseL(objects,[])})}return mapL(MxObject1.fromState(state),obj=>({object:obj.old()}))}(store.get(widget,"allpages"===source?"allGuids":source),source)})}function toMicroflowParameters(parameters){const result={};return Object.keys(parameters).forEach(name=>{const value=parameters[name];value&&(result[name]="objects"in value?{guids:value.objects.map(mxobj=>mxobj.getGuid())}:"object"in value?{guid:value.object.getGuid()}:value)}),result}function toNanoflowParameters(parameters){const result=[];return Object.keys(parameters).forEach(name=>{const value=parameters[name];result.push({name:name,value:void 0!==value?"object"in value?value.object:crash():void 0})}),result}export{toMicroflowParameters as a,toNanoflowParameters as b,getActionParameters as c};
