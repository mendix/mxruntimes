import{View}from"react-native";import{Component,createElement,Fragment}from"react";import{a as pluckFromList,b as exclude,d as only}from"./03e5fd40.js";import{TabBar,TabView}from"react-native-tab-view";class TabContainer extends Component{constructor(){super(...arguments),this.state={tabViewState:{index:(index=>-1===index?0:index)(this.props.pages.findIndex(page=>page.isDefault)),routes:this.props.pages.map((page,index)=>({key:`${index}`,title:page.caption.value,testID:`${this.props.name}$page${index}`}))},processedStyles:this.processStyles()},this.renderScene=(({route:route})=>createElement(Fragment,null,createElement(View,{style:{flex:1},testID:`${this.props.name}$sceneView`},this.props.pages[parseInt(route.key,10)].page))),this.renderTabBar=(props=>{const{tabBarStyles:tabBarStyles,tabBarStyleProps:tabBarStyleProps,tabStyles:tabStyles,labelStyles:labelStyles,indicatorStyles:indicatorStyles}=this.state.processedStyles;return createElement(TabBar,Object.assign({},props,{tabStyle:tabStyles,indicatorStyle:indicatorStyles,labelStyle:labelStyles,style:tabBarStyles},tabBarStyleProps,{getTestID:({route:route})=>`${route.testID}$tabHeader`}))})}render(){const{containerStyles:containerStyles,containerStyleProps:containerStyleProps}=this.state.processedStyles;return createElement(TabView,Object.assign({navigationState:this.state.tabViewState,renderScene:this.renderScene,renderTabBar:this.renderTabBar,onIndexChange:index=>this.setState(state=>({tabViewState:Object.assign({},state.tabViewState,{index:index})})),style:containerStyles},containerStyleProps))}processStyles(){const tabBarStylePropsKeys=["scrollEnabled","bounces","pressColor","pressOpacity"],tabViewStylePropsKeys=["tabBarPosition"];return{tabBarStyles:pluckFromList(this.props.style,"tabBar").map(tabBarStyle=>{const tabBarStyleProps=exclude(tabBarStyle,tabBarStylePropsKeys);return exclude(tabBarStyleProps,tabViewStylePropsKeys)}),tabBarStyleProps:pluckFromList(this.props.style,"tabBar").map(tabBarStyle=>only(tabBarStyle,tabBarStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),containerStyles:pluckFromList(this.props.style,"container"),containerStyleProps:pluckFromList(this.props.style,"tabBar").map(tabViewStyle=>only(tabViewStyle,tabViewStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),indicatorStyles:pluckFromList(this.props.style,"indicator"),tabStyles:pluckFromList(this.props.style,"tab"),labelStyles:pluckFromList(this.props.style,"label")}}}export{TabContainer};
