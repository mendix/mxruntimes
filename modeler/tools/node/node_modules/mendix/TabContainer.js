import{View}from"react-native";import{Component,createElement}from"react";import{_ as __rest}from"./5b829f15.js";import{f as flatten,e as extract}from"./84c5d961.js";import{TabView,TabBar}from"react-native-tab-view";class TabContainer extends Component{constructor(){super(...arguments),this.state={index:this.getDefaultPageIndex(this.props.pages)},this.renderSceneHandler=this.renderScene.bind(this),this.renderTabBarHandler=this.renderTabBar.bind(this),this.onIndexChangeHandler=this.onIndexChange.bind(this)}render(){this.style=function(styles){const _a=flatten(styles),{tabBar:tabBarStyle}=_a,other=__rest(_a,["tabBar"]),[{tabBarPosition:tabBarPosition,scrollEnabled:scrollEnabled,bounces:bounces,pressColor:pressColor,pressOpacity:pressOpacity},tabBar]=extract(tabBarStyle,["tabBarPosition","scrollEnabled","bounces","pressColor","pressOpacity"]),containerProps={tabBarPosition:tabBarPosition},tabBarProps={scrollEnabled:scrollEnabled,bounces:bounces,pressColor:pressColor,pressOpacity:pressOpacity};return Object.assign({containerProps:containerProps,tabBarProps:tabBarProps,tabBar:tabBar},other)}(this.props.style);const visibleRoutes=this.getVisibleRoutes(this.props.pages);return visibleRoutes.length>0?createElement(TabView,Object.assign({navigationState:{index:this.state.index,routes:visibleRoutes},renderScene:this.renderSceneHandler,renderTabBar:this.renderTabBarHandler,onIndexChange:this.onIndexChangeHandler,style:this.style.container},this.style.containerProps)):null}renderScene({route:route}){return createElement(View,{style:{flex:1},testID:`${this.props.name}$sceneView`},this.props.pages[parseInt(route.key,10)].page)}renderTabBar(props){return createElement(TabBar,Object.assign({},props,{tabStyle:this.style.tab,indicatorStyle:this.style.indicator,labelStyle:this.style.label,style:this.style.tabBar},this.style.tabBarProps,{getTestID:TabContainer.getTestID}))}onIndexChange(index){this.setState({index:index})}getVisibleRoutes(pages){const unfilteredPages=pages;return pages.filter(page=>!page.isVisible||page.isVisible.value).map(page=>({key:unfilteredPages.findIndex(unfilteredPage=>page.name===unfilteredPage.name).toString(),title:page.caption.value,testID:`${this.props.name}$${page.name}`}))}getDefaultPageIndex(pages){const defaultPageIndex=pages.findIndex(page=>page.isDefault);return-1===defaultPageIndex?0:defaultPageIndex}static getTestID({route:route}){return`${route.testID}$tabHeader`}}export{TabContainer};
