import"./d4030583.js";import"./43297fe2.js";import{m as mapValues}from"./c49f953c.js";import"./0e7164f2.js";import"./b98156b5.js";import"./ee5a929f.js";import{l as loading,g as getOrElseL,a as available,u as unavailable}from"./189c82c6.js";import"big.js";import"./8676e47e.js";import{a as asProperty}from"./72a4665b.js";import"./925daa43.js";import"./d6b7d05a.js";import"./2745d635.js";import{e as getActionParameters$,t as toMicroflowParameters}from"./49a60b8f.js";import{g as getClientPagedList}from"./34a2844a.js";const MicroflowObjectListProperty=asProperty((config,store,widgetId)=>{const result=getClientPagedList(config,store,widgetId,()=>getActionParameters$(config.argMap,store),(async function(parameters){if(Object.values(parameters).some(p=>"loading"===p.status))return loading();try{const result=await mx.onlineData.retrieveByMicroflow(config.microflow,config.queryId,toMicroflowParameters(mapValues(parameters,p=>getOrElseL(p,void 0))));return available(result.objects)}catch(e){return function(config,e){mx.onError(new Error(`An error occurred while executing object list data source microflow for widget ${config.friendlyId}: ${e.message}`))}(config,e),unavailable()}}));return()=>result.get()});export{MicroflowObjectListProperty};
