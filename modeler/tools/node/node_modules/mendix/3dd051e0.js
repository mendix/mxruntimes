import{a as formatDate,b as parseDate,F as getDateFormatPlaceholder,f as formatNumber,p as parseNumber,E as formatValue,G as parseValue}from"./9df15dda.js";import{F as FormatterType}from"./66d323db.js";class DefaultDateTimeFormatter{constructor(config){this.config=config,this.type=FormatterType.DateTime}format(value){return!value||isNaN(value.getTime())?"":formatDate(value,this.config)}parse(value){if(""===value)return{valid:!0,value:void 0};const result=parseDate(value,this.config);return void 0===result?{valid:!1}:{valid:!0,value:result}}getFormatPlaceholder(){return getDateFormatPlaceholder(this.config)}withConfig(config){return new DefaultDateTimeFormatter(config)}}class DefaultEnumFormatter{constructor(universe){this.universe=universe}format(value){const entry=this.universe.find(e=>e.key===value);return entry?entry.caption:value?value.toString():""}parse(_value){throw new Error("Enumeration values cannot be parsed")}}class DefaultNumberFormatter{constructor(config){this.config=config,this.type=FormatterType.Number}format(value){return value?formatNumber(value,this.config.groupDigits,this.config.decimalPrecision):""}parse(inputValue){if(""===inputValue)return{valid:!0,value:void 0};const result=parseNumber(inputValue,this.config.decimalPrecision);return void 0===result?{valid:!1}:{valid:!0,value:result}}withConfig(config){return new DefaultNumberFormatter(config)}}function createFormatter(entity,attribute,config){const metaObject=mx.meta.getEntity(entity),attributeType=metaObject.getAttributeType(attribute);return attributeType?"Enum"===attributeType?new DefaultEnumFormatter(metaObject.getEnumMap(attribute)):createNonEnumFormatter(attributeType,config):{format:()=>"",parse:()=>{throw new Error("Cannot parse values for unresolved attribute")}}}function createNonEnumFormatter(attributeType,config){switch(attributeType){case"DateTime":return new DefaultDateTimeFormatter(config.dateFormat||{type:"date"});case"Integer":case"Long":case"Decimal":return new DefaultNumberFormatter(config.numberFormat||{groupDigits:!1});default:return{format:value=>formatValue(value,attributeType),parse:inputValue=>{const value=parseValue(inputValue,attributeType);return void 0!==value?{valid:!0,value:value}:{valid:!1}}}}}export{createNonEnumFormatter as a,createFormatter as c};
