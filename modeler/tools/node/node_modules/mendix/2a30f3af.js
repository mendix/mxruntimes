import{d as comparer$$1,e as withoutGlitches,f as observable$$1}from"./5dda5eb7.js";import{b as AssertionError}from"./ddd19e5a.js";import{a as Big}from"./3019ed1f.js";import{a as BehaviorSubject}from"./aa3ddc5d.js";const persistableSlots=["amount","offset","selection"],pageScope="$pageParameter",stateUnavailable="unavailable";class Store{constructor(parentStore){this.parentStore=parentStore,this.stateMap={},this.childStores=[],this.parentStore&&this.parentStore.childStores.push(this)}destroy(){this.parentStore&&this.parentStore.childStores.splice(this.parentStore.childStores.indexOf(this),1)}set(widgetId,slot,value){const state=this.getState(widgetId,slot,!1);comparer$$1.structural(state.subject.value,value)||withoutGlitches(()=>{state.box.set(value),state.subject.next(value)})}get(widgetId,slot){return this.getState(widgetId,slot,!0).box.get()}get$(widgetId,slot){return this.getState(widgetId,slot,!0).subject}getAll(slot){return Object.keys(this.stateMap).filter(keyString=>JSON.parse(keyString).slot===slot).map(keyString=>this.stateMap[keyString].box.get()).concat(...this.childStores.map(store=>store.getAll(slot)))}dehydrate(){return Object.keys(this.stateMap).map(keyString=>JSON.parse(keyString)).filter(({slot:slot})=>persistableSlots.includes(slot)).map(({widgetId:widgetId,slot:slot})=>({widgetId:widgetId,slot:slot,value:this.get(widgetId,slot)}))}hydrate(states){states.forEach(({widgetId:widgetId,slot:slot,value:value})=>{if(!persistableSlots.includes(slot))throw new AssertionError(`Invalid slot for restoring the state: ${slot}`);switch(slot){case"amount":case"offset":this.set(widgetId,slot,value instanceof Big?value:Big(value.toString()));break;default:this.set(widgetId,slot,value)}})}getState(widgetId,slot,inherited){const keyString=JSON.stringify({widgetId:widgetId,slot:slot});if(keyString in this.stateMap)return this.stateMap[keyString];if(inherited&&this.parentStore){const inheritedState=this.parentStore.findState(keyString);if(inheritedState)return inheritedState}const box=observable$$1.box(void 0,{deep:!1}),subject=new BehaviorSubject(void 0);return this.stateMap[keyString]={box:box,subject:subject},this.stateMap[keyString]}findState(keyString){return keyString in this.stateMap?this.stateMap[keyString]:this.parentStore?this.parentStore.findState(keyString):void 0}}export{Store as a,pageScope as b,stateUnavailable as c};
