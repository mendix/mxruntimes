import{Text,View,TextInput}from"react-native";import{Component,createElement,Fragment}from"react";import{p as pluckFromList,e as exclude,o as only}from"./c979549b.js";import"./db3af15f.js";import{A as Alert}from"./3107acfa.js";class TextArea extends Component{constructor(){super(...arguments),this.state={internalValue:this.props.inputValue.displayValue||""},this.onChangeTextHandler=this.onChangeText.bind(this),this.onFocusHandler=this.onFocus.bind(this),this.onBlurHandler=this.onBlur.bind(this)}componentDidUpdate(prevProps){this.props.inputValue.displayValue!==prevProps.inputValue.displayValue&&this.setState({internalValue:this.props.inputValue.displayValue})}onChangeText(text){this.setState({internalValue:text})}onFocus(){this.dispatchAction("onEnter")}onBlur(){this.state.internalValue!==this.props.inputValue.displayValue&&this.props.inputValue.setValue(this.state.internalValue),this.dispatchAction("onLeave")}render(){const{inputStyles:inputStyles,inputDisabledStyles:inputDisabledStyles,inputErrorStyles:inputErrorStyles,labelStyles:labelStyles,labelStyleProps:labelStyleProps,validationMessageStyles:validationMessageStyles,inputTextInputStyleProps:inputTextInputStyleProps,inputDisabledTextInputStyleProps:inputDisabledTextInputStyleProps,inputErrorTextInputStyleProps:inputErrorTextInputStyleProps,containerStyle:containerStyle,inputContainerStyle:inputContainerStyle}=this.processStyles(),validation=this.props.inputValue.validation,labelComponent=this.props.label?createElement(Text,Object.assign({testID:`${this.props.name}$label`,key:"label",style:labelStyles},labelStyleProps),this.props.label.value):null,editable=!this.props.inputValue.readOnly,style=editable?validation?[...inputStyles,...inputErrorStyles]:inputStyles:[...inputStyles,...inputDisabledStyles],styleProps=editable?validation?inputErrorTextInputStyleProps:inputTextInputStyleProps:inputDisabledTextInputStyleProps,props=Object.assign({multiline:!0,numberOfLines:this.props.numberOfLines,testID:this.props.name,style:style,editable:editable,onChangeText:this.onChangeTextHandler,onFocus:this.onFocusHandler,onBlur:this.onBlurHandler,maxLength:this.props.maxLength,placeholder:this.props.placeholder.value||void 0,value:this.state.internalValue},styleProps);return createElement(Fragment,null,createElement(View,{key:"container",style:containerStyle},labelComponent,createElement(View,{style:inputContainerStyle},createElement(TextInput,Object.assign({key:"input"},props)),createElement(Alert,{key:"alert",testID:`${this.props.name}$alert`,style:validationMessageStyles,error:validation}))))}dispatchAction(property){const prop=this.props[property];"available"===this.props.inputValue.status&&prop&&prop.execute()}processStyles(){const textInputStylePropsKeys=["autoCapitalize","placeholderTextColor","selectionColor","underlineColorAndroid"],labelStylePropsKeys=["numberOfLines"],isHorizontal="horizontal"===this.props.formOrientation,inputStyles=pluckFromList(this.props.style,"input").map(inputStyle=>{const textAreaStyleProps=exclude(inputStyle,textInputStylePropsKeys);return exclude(textAreaStyleProps,labelStylePropsKeys)}),inputDisabledStyles=pluckFromList(this.props.style,"inputDisabled").map(inputDisabledStyle=>exclude(inputDisabledStyle,textInputStylePropsKeys)),inputErrorStyles=pluckFromList(this.props.style,"inputError").map(inputErrorStyle=>exclude(inputErrorStyle,textInputStylePropsKeys)),inputTextInputStyleProps=pluckFromList(this.props.style,"input").map(inputStyle=>only(inputStyle,textInputStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),inputDisabledTextInputStyleProps=pluckFromList(this.props.style,"inputDisabled").map(inputDisabledStyle=>only(inputDisabledStyle,textInputStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),inputErrorTextInputStyleProps=pluckFromList(this.props.style,"inputError").map(inputErrorStyle=>only(inputErrorStyle,textInputStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),labelDirectionStyle=isHorizontal?{flex:this.props.labelWidth}:void 0;return{inputStyles:inputStyles,inputDisabledStyles:inputDisabledStyles,inputErrorStyles:inputErrorStyles,labelStyles:[...pluckFromList(this.props.style,"label").map(labelStyle=>{const textAreaStyleProps=exclude(labelStyle,textInputStylePropsKeys);return exclude(textAreaStyleProps,labelStylePropsKeys)}),labelDirectionStyle],labelStyleProps:pluckFromList(this.props.style,"label").map(labelStyle=>only(labelStyle,labelStylePropsKeys)).reduce((result,style)=>Object.assign({},result,style),{}),validationMessageStyles:pluckFromList(this.props.style,"validationMessage"),inputTextInputStyleProps:inputTextInputStyleProps,inputDisabledTextInputStyleProps:inputDisabledTextInputStyleProps,inputErrorTextInputStyleProps:inputErrorTextInputStyleProps,containerStyle:[...pluckFromList(this.props.style,"container"),isHorizontal?{flexDirection:"row",alignItems:"center"}:void 0],inputContainerStyle:Object.assign({flexDirection:"column"},isHorizontal?{flex:12-this.props.labelWidth}:void 0)}}}export{TextArea};
