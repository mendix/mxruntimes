import{c as configure$$1,h as computed$$1,a as reaction$$1,i as createAtom$$1,f as observable$$1,j as allowStateChangesInsideComputed$$1,k as runInAction$$1}from"./6727fec8.js";import{b as AssertionError,d as ensure}from"./ff203afa.js";import{e as subscribe}from"./02d97a6c.js";import{a as loading}from"./7a470c91.js";function subscriptionDependency(name,subscription){let handle;const atom=createAtom$$1(name,()=>{handle=subscribe(Object.assign({tag:name},subscription,{callback:()=>atom.reportChanged()}))},()=>{ensure(handle).unsubscribe(),handle=void 0});return{reportObserved:()=>{atom.reportObserved()}}}function timerDependency(name,time){let handle;const atom=createAtom$$1(name,()=>{handle=setInterval(()=>atom.reportChanged(),time)},()=>{clearInterval(ensure(handle)),handle=void 0});return{reportObserved:()=>{atom.reportObserved()}}}function loadableResource(name,factory,initialValue=loading()){const atom=createAtom$$1(name,fetchResource);let value;function fetchResource(){const result=factory();result instanceof Promise?(value=initialValue,result.then(finalValue=>{value=finalValue,atom.reportChanged()},e=>mx.onError(e))):value=result}return computed$$1(()=>(atom.reportObserved()||fetchResource(),value))}function loadableDependentResource(name,getParameter,factory){const resourceBox=observable$$1.box(computed$$1(()=>loading()),{deep:!1});return using(()=>[reaction$$1(getParameter,param=>resourceBox.set(loadableResource(name,()=>factory(param))),{fireImmediately:!0})],()=>resourceBox.get().get())}function using(resourcesFactory,func){let resourceDisposers;const atom=createAtom$$1("Resources tracker",()=>{resourceDisposers=resourcesFactory()},()=>resourceDisposers.forEach(r=>r()));return computed$$1(()=>{const result=func();return atom.reportObserved(),result})}function valueMonitor(expression){let lastSeenValue,firstRun=!0;const atom=createAtom$$1(`Inline reaction on ${expression}`,void 0,()=>firstRun=!0);return{runIfChanged(effect){if(!atom.reportObserved())throw new AssertionError;const newValue=expression();(firstRun||lastSeenValue!==newValue)&&(firstRun=!1,lastSeenValue=newValue,runActionInComputed(()=>effect(newValue)))}}}function runActionInComputed(action){allowStateChangesInsideComputed$$1(()=>runInAction$$1(action))}configure$$1({enforceActions:"always"});export{subscriptionDependency as a,loadableResource as b,using as c,valueMonitor as d,loadableDependentResource as e,runActionInComputed as f,timerDependency as g};
