import{b as computed,o as observable,a as action}from"./14498da2.js";import"./53bf75a6.js";import"./d04a146b.js";import{a as asProperty}from"./e3b801f3.js";import{Big}from"big.js";import{z as assertIsNonEnumValue}from"./572de7b1.js";import"./fdd4c4ff.js";import{t as translate}from"./8ea35cb3.js";import"./573c00fc.js";import{v as valueMonitor}from"./8e682f3a.js";import"./ace8a918.js";import{a as createNonEnumFormatter}from"./cdb30acb.js";const WidgetVariableProperty=asProperty(({slot:slot,type:type,initialValue:initialValue,widgetId:widgetId},store)=>{void 0===store.get$(widgetId,slot)&&void 0!==initialValue&&store.set(widgetId,slot,"number"==typeof initialValue?Big(initialValue):initialValue);const defaultFormatter=createNonEnumFormatter(type,{}),submittedValue=computed(()=>store.get$(widgetId,slot)),unsubmittedValue=observable.box(void 0,{deep:!1}),formatter=observable.box(defaultFormatter,{deep:!1});let validator;const submittedValueMonitor=valueMonitor(()=>submittedValue.get());return()=>{submittedValueMonitor.runIfChanged(()=>unsubmittedValue.set(void 0));const submitted=submittedValue.get(),unsubmitted=unsubmittedValue.get(),value=void 0!==unsubmitted&&"unparsed"===unsubmitted.state?void 0:void 0!==unsubmitted?unsubmitted.value:submitted,displayValue=void 0!==unsubmitted&&"unparsed"===unsubmitted.state?unsubmitted.value:formatter.get().format(void 0!==unsubmitted?unsubmitted.value:submitted);return{status:"available",validation:void 0!==unsubmitted?unsubmitted.message:void 0,universe:void 0,readOnly:!1,formatter:formatter.get(),value:value,displayValue:displayValue,setValidator:v=>validator=v,setFormatter:action(f=>formatter.set(f||defaultFormatter)),setTextValue:action(v=>(function(value){const parseResult=formatter.get().parse(value);parseResult.valid?setValue(parseResult.value):unsubmittedValue.set({state:"unparsed",value:value,message:getInvalidMessage(type)})})(v)),setValue:action(v=>setValue(v))}};function setValue(value){assertIsNonEnumValue(value,type);const validation=void 0!==validator?validator(value):void 0;void 0!==validation?unsubmittedValue.set({state:"parsed",value:value,message:validation}):store.set(widgetId,slot,value)}});function getInvalidMessage(attributeType){switch(attributeType){case"String":case"Boolean":case"ObjectReferenceSet":return translate("mendix.lib.Validations","invalid_value");case"Decimal":return translate("mendix.lib.Validations","invalid_number")}}export{WidgetVariableProperty};
