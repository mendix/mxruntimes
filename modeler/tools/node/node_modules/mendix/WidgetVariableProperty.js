import{h as computed$$1,f as observable$$1,b as glitchFree}from"./5dda5eb7.js";import"./ddd19e5a.js";import{c as asProperty}from"./71d615f7.js";import{a as Big}from"./3019ed1f.js";import"./967e2ac0.js";import{a as translate}from"./c38a792c.js";import"./d9069e30.js";import"./33defb9b.js";import"./d5eebceb.js";import"./eed44530.js";import"./aa3ddc5d.js";import{r as assertIsNonEnumValue}from"./3c905f8d.js";import"./b26e8ded.js";import"./cf055752.js";import{d as valueMonitor}from"./86e285ad.js";import{b as createNonEnumFormatter}from"./8e1d1bca.js";const WidgetVariableProperty=asProperty(({slot:slot,type:type,initialValue:initialValue,widgetId:widgetId},store)=>{void 0===store.get(widgetId,slot)&&void 0!==initialValue&&store.set(widgetId,slot,"number"==typeof initialValue?Big(initialValue):initialValue);const formatter=createNonEnumFormatter(type,{}),submittedValue=computed$$1(()=>store.get(widgetId,slot)),unsubmittedValue=observable$$1.box(void 0,{deep:!1}),formatterConfig=observable$$1.box(formatter.defaultConfig,{deep:!1});let validator;const submittedValueMonitor=valueMonitor(()=>submittedValue.get());return()=>{submittedValueMonitor.runIfChanged(()=>unsubmittedValue.set(void 0));const submitted=submittedValue.get(),unsubmitted=unsubmittedValue.get(),value=void 0!==unsubmitted&&"unparsed"===unsubmitted.state?void 0:void 0!==unsubmitted?unsubmitted.value:submitted,displayValue=void 0!==unsubmitted&&"unparsed"===unsubmitted.state?unsubmitted.value:formatter.format(void 0!==unsubmitted?unsubmitted.value:submitted,formatterConfig.get());return{status:"available",validation:void 0!==unsubmitted?unsubmitted.message:void 0,universe:void 0,readOnly:!1,formatter:formatter,value:value,displayValue:displayValue,setValidator:v=>validator=v,setFormatting:glitchFree(f=>formatterConfig.set(f)),setTextValue:glitchFree(v=>(function(value){const parseResult=formatter.parse(value,formatterConfig.get());parseResult.valid?setValue(parseResult.value):unsubmittedValue.set({state:"unparsed",value:value,message:getInvalidMessage(type)})})(v)),setValue:glitchFree(v=>setValue(v))}};function setValue(value){assertIsNonEnumValue(value,type);const validation=void 0!==validator?validator(value):void 0;void 0!==validation?unsubmittedValue.set({state:"parsed",value:value,message:validation}):store.set(widgetId,slot,value)}});function getInvalidMessage(attributeType){switch(attributeType){case"String":case"Boolean":case"ObjectReferenceSet":return translate("mendix.lib.Validations","invalid_value");case"Decimal":return translate("mendix.lib.Validations","invalid_number")}}export{WidgetVariableProperty};
