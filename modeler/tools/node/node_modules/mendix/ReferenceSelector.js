import"react-native";import"./14498da2.js";import{createElement}from"react";import"./53bf75a6.js";import"big.js";import{k as clientToAttributeValue}from"./572de7b1.js";import"./fdd4c4ff.js";import"./8ea35cb3.js";import"./ace8a918.js";import{c as createFormatter}from"./cdb30acb.js";import{f as fromObjectItem}from"./7975ceb4.js";import{p as pluckFromList}from"./c979549b.js";import"./db3af15f.js";import"./3107acfa.js";import{D as DropDownControl}from"./9e6cb56a.js";function ReferenceSelector(props){const{name:name,value:value,valueOptions:valueOptions,formOrientation:formOrientation,labelWidth:labelWidth,label:label,style:style,attribute:attribute,entity:entity}=props,formatter=createFormatter(entity,attribute,props.formatting),emptyOption={value:"",label:props.emptyOptionCaption.value||""},items="available"===valueOptions.status?[emptyOption,...valueOptions.value.items.map(fromObjectItem).map(({obj:obj})=>({value:obj.getGuid(),label:formatter.format(clientToAttributeValue(obj.get(attribute),obj.getAttributeType(attribute)))}))]:[],enabled=!value.readOnly&&"available"===valueOptions.status,validationMessageStyles=pluckFromList(style,"validationMessage");return createElement(DropDownControl,{name:name,style:style,label:label,labelWidth:labelWidth,formOrientation:formOrientation,inline:!1,disabled:!enabled,items:items,selectedValue:value.value||"",onValueChange:newValue=>{props.value.setValue(newValue)},validation:value.validation,validationMessageStyles:validationMessageStyles})}export{ReferenceSelector};
