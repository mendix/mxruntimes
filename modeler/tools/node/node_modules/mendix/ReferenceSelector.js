import"react-native";import"./4887fae1.js";import{createElement}from"react";import"./b0fce5df.js";import"big.js";import{h as clientToAttributeValue}from"./8f1f3520.js";import"./b98156b5.js";import"./28ba9e42.js";import"./09e8fbb9.js";import{c as createFormatter}from"./ec7b7545.js";import{f as fromObjectItem}from"./2d0c3e4e.js";import{p as pluckFromList}from"./c701e63b.js";import"./5b829f15.js";import"./14a5240d.js";import{D as DropDownControl}from"./da943f9b.js";function ReferenceSelector(props){const{name:name,value:value,valueOptions:valueOptions,formOrientation:formOrientation,labelWidth:labelWidth,label:label,style:style,attribute:attribute,entity:entity}=props,formatter=createFormatter(entity,attribute,props.formatting),emptyOption={value:"",label:props.emptyOptionCaption.value||""},items="available"===valueOptions.status?[emptyOption,...valueOptions.value.items.map(fromObjectItem).map(({obj:obj})=>({value:obj.getGuid(),label:formatter.format(clientToAttributeValue(obj.get(attribute),obj.getAttributeType(attribute)))}))]:[],enabled=!value.readOnly&&"available"===valueOptions.status,validationMessageStyles=pluckFromList(style,"validationMessage");return createElement(DropDownControl,{name:name,style:style,label:label,labelWidth:labelWidth,formOrientation:formOrientation,inline:!1,disabled:!enabled,items:items,selectedValue:value.value||"",onValueChange:newValue=>{props.value.setValue(newValue)},validation:value.validation,validationMessageStyles:validationMessageStyles})}export{ReferenceSelector};
