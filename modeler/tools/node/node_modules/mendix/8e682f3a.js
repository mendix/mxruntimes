import{c as configure,b as computed,o as observable,e as createAtom,g as allowStateChangesInsideComputed,r as reaction,d as runInAction}from"./14498da2.js";import{A as AssertionError}from"./53bf75a6.js";import{l as loading,e as ensure}from"./d04a146b.js";import{s as subscribe}from"./572de7b1.js";function subscriptionDependency(name,subscription){let handle;const atom=createAtom(name,()=>{handle=subscribe(Object.assign({tag:name},subscription,{callback:()=>atom.reportChanged()}))},()=>{ensure(handle).unsubscribe(),handle=void 0});return{reportObserved:()=>{atom.reportObserved()}}}function timerDependency(name,time){let handle;const atom=createAtom(name,()=>{handle=setInterval(()=>atom.reportChanged(),time)},()=>{clearInterval(ensure(handle)),handle=void 0});return{reportObserved:()=>{atom.reportObserved()}}}function loadableResource(name,factory,initialValue=loading()){const atom=createAtom(name,fetchResource);let value;function fetchResource(){const result=factory();result instanceof Promise?(value=initialValue,result.then(finalValue=>{value=finalValue,atom.reportChanged()},e=>mx.onError(e))):value=result}return computed(()=>(atom.reportObserved()||fetchResource(),value))}function loadableDependentResource(name,getParameter$,factory){const resourceBox=observable.box(computed(()=>loading()),{deep:!1});return using(()=>[reaction(getParameter$,param=>resourceBox.set(loadableResource(name,()=>factory(param))),{fireImmediately:!0})],()=>resourceBox.get().get())}function using(resourcesFactory,func$){let resourceDisposers;const atom=createAtom("Resources tracker",()=>{resourceDisposers=resourcesFactory()},()=>resourceDisposers.forEach(r=>r()));return computed(()=>{const result=func$();return atom.reportObserved(),result})}function valueMonitor(expression){let lastSeenValue,firstRun=!0;const atom=createAtom(`Inline reaction on ${expression}`,void 0,()=>firstRun=!0);return{runIfChanged(effect){if(!atom.reportObserved())throw new AssertionError;const newValue=expression();(firstRun||lastSeenValue!==newValue)&&(firstRun=!1,lastSeenValue=newValue,runActionInComputed(()=>effect(newValue)))}}}function runActionInComputed(action){allowStateChangesInsideComputed(()=>runInAction(action))}configure({enforceActions:"always"});export{loadableDependentResource as a,loadableResource as l,runActionInComputed as r,subscriptionDependency as s,timerDependency as t,using as u,valueMonitor as v};
