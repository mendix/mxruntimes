import{b as runInAction}from"./f0d16cff.js";import{n as newId}from"./b98156b5.js";class AssertionError extends Error{constructor(message="Unexpected error occurred, please contact your system administrator."){super(message),Object.setPrototypeOf(this,AssertionError.prototype)}}const subscriptions=new Map;function subscribe(subscription){const id=newId();return subscriptions.set(id,subscription),{unsubscribe:()=>subscriptions.delete(id)}}async function publish(...messages){const subsArray=Array.from(subscriptions.values()),receivers=[];for(const message of messages)if("topic"in message)receivers.push(...subsArray.filter(s=>"topic"in s&&s.topic===message.topic));else if("entity"in message){const entities=[message.entity].concat(mx.meta.getEntity(message.entity).getSuperEntities());receivers.push(...subsArray.filter(s=>"entity"in s&&entities.includes(s.entity)))}else"attr"in message?receivers.push(...subsArray.filter(s=>"attr"in s&&s.attr===message.attr&&s.guid===message.guid)):receivers.push(...subsArray.filter(s=>"guid"in s&&!("attr"in s)&&s.guid===message.guid));const updates=runInAction(()=>receivers.map(s=>void 0!==s.callback?s.callback():void 0));await Promise.all(updates)}function getTags(guid){return Array.from(subscriptions.values()).filter(s=>"guid"in s&&s.guid===guid).map(s=>s.tag).filter(t=>t)}function getSubscribedGuids(){return Array.from(subscriptions.values()).filter(s=>"guid"in s).map(s=>s.guid)}export{AssertionError as A,getTags as a,getSubscribedGuids as g,publish as p,subscribe as s};
